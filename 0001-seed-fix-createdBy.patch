From d51123e68bb806492b6459ef34a7b7fa80e31e4e Mon Sep 17 00:00:00 2001
Date: Tue, 19 Dec 2023 10:31:20 +0100
Subject: [PATCH] seed + fix createdBy

---
 back/.vscode/settings.json                    |   2 +-
 back/docker-compose.yml                       |   8 +-
 back/package.json                             |   5 +-
 back/pnpm-lock.yaml                           |   9 +-
 back/prisma/generated/type-graphql/helpers.ts |   9 +-
 .../crud/Cart/AggregateCartResolver.ts        |   7 +-
 .../resolvers/crud/Cart/CartCrudResolver.ts   | 110 +++++++-----
 .../crud/Cart/CreateManyCartResolver.ts       |   8 +-
 .../crud/Cart/CreateOneCartResolver.ts        |   8 +-
 .../crud/Cart/DeleteManyCartResolver.ts       |   8 +-
 .../crud/Cart/DeleteOneCartResolver.ts        |   8 +-
 .../crud/Cart/FindFirstCartOrThrowResolver.ts |   8 +-
 .../crud/Cart/FindFirstCartResolver.ts        |   8 +-
 .../crud/Cart/FindManyCartResolver.ts         |   8 +-
 .../Cart/FindUniqueCartOrThrowResolver.ts     |   8 +-
 .../crud/Cart/FindUniqueCartResolver.ts       |   8 +-
 .../crud/Cart/GroupByCartResolver.ts          |   7 +-
 .../crud/Cart/UpdateManyCartResolver.ts       |   8 +-
 .../crud/Cart/UpdateOneCartResolver.ts        |   8 +-
 .../crud/Cart/UpsertOneCartResolver.ts        |   8 +-
 .../CartRows/AggregateCartRowsResolver.ts     |   7 +-
 .../crud/CartRows/CartRowsCrudResolver.ts     | 110 +++++++-----
 .../CartRows/CreateManyCartRowsResolver.ts    |   8 +-
 .../CartRows/CreateOneCartRowsResolver.ts     |   8 +-
 .../CartRows/DeleteManyCartRowsResolver.ts    |   8 +-
 .../CartRows/DeleteOneCartRowsResolver.ts     |   8 +-
 .../FindFirstCartRowsOrThrowResolver.ts       |   8 +-
 .../CartRows/FindFirstCartRowsResolver.ts     |   8 +-
 .../crud/CartRows/FindManyCartRowsResolver.ts |   8 +-
 .../FindUniqueCartRowsOrThrowResolver.ts      |   8 +-
 .../CartRows/FindUniqueCartRowsResolver.ts    |   8 +-
 .../crud/CartRows/GroupByCartRowsResolver.ts  |   7 +-
 .../CartRows/UpdateManyCartRowsResolver.ts    |   8 +-
 .../CartRows/UpdateOneCartRowsResolver.ts     |   8 +-
 .../CartRows/UpsertOneCartRowsResolver.ts     |   8 +-
 .../crud/Product/AggregateProductResolver.ts  |   7 +-
 .../crud/Product/CreateManyProductResolver.ts |   8 +-
 .../crud/Product/CreateOneProductResolver.ts  |   8 +-
 .../crud/Product/DeleteManyProductResolver.ts |   8 +-
 .../crud/Product/DeleteOneProductResolver.ts  |   8 +-
 .../FindFirstProductOrThrowResolver.ts        |   8 +-
 .../crud/Product/FindFirstProductResolver.ts  |   8 +-
 .../crud/Product/FindManyProductResolver.ts   |   8 +-
 .../FindUniqueProductOrThrowResolver.ts       |   8 +-
 .../crud/Product/FindUniqueProductResolver.ts |   8 +-
 .../crud/Product/GroupByProductResolver.ts    |   7 +-
 .../crud/Product/ProductCrudResolver.ts       | 110 +++++++-----
 .../crud/Product/UpdateManyProductResolver.ts |   8 +-
 .../crud/Product/UpdateOneProductResolver.ts  |   8 +-
 .../crud/Product/UpsertOneProductResolver.ts  |   8 +-
 .../Provider/AggregateProviderResolver.ts     |   7 +-
 .../Provider/CreateManyProviderResolver.ts    |   8 +-
 .../Provider/CreateOneProviderResolver.ts     |   8 +-
 .../Provider/DeleteManyProviderResolver.ts    |   8 +-
 .../Provider/DeleteOneProviderResolver.ts     |   8 +-
 .../FindFirstProviderOrThrowResolver.ts       |   8 +-
 .../Provider/FindFirstProviderResolver.ts     |   8 +-
 .../crud/Provider/FindManyProviderResolver.ts |   8 +-
 .../FindUniqueProviderOrThrowResolver.ts      |   8 +-
 .../Provider/FindUniqueProviderResolver.ts    |   8 +-
 .../crud/Provider/GroupByProviderResolver.ts  |   7 +-
 .../crud/Provider/ProviderCrudResolver.ts     | 110 +++++++-----
 .../Provider/UpdateManyProviderResolver.ts    |   8 +-
 .../Provider/UpdateOneProviderResolver.ts     |   8 +-
 .../Provider/UpsertOneProviderResolver.ts     |   8 +-
 .../AggregateRefreshTokenResolver.ts          |   7 +-
 .../CreateManyRefreshTokenResolver.ts         |   8 +-
 .../CreateOneRefreshTokenResolver.ts          |   8 +-
 .../DeleteManyRefreshTokenResolver.ts         |   8 +-
 .../DeleteOneRefreshTokenResolver.ts          |   8 +-
 .../FindFirstRefreshTokenOrThrowResolver.ts   |   8 +-
 .../FindFirstRefreshTokenResolver.ts          |   8 +-
 .../FindManyRefreshTokenResolver.ts           |   8 +-
 .../FindUniqueRefreshTokenOrThrowResolver.ts  |   8 +-
 .../FindUniqueRefreshTokenResolver.ts         |   8 +-
 .../GroupByRefreshTokenResolver.ts            |   7 +-
 .../RefreshToken/RefreshTokenCrudResolver.ts  | 110 +++++++-----
 .../UpdateManyRefreshTokenResolver.ts         |   8 +-
 .../UpdateOneRefreshTokenResolver.ts          |   8 +-
 .../UpsertOneRefreshTokenResolver.ts          |   8 +-
 .../crud/User/AggregateUserResolver.ts        |   7 +-
 .../crud/User/CreateManyUserResolver.ts       |   8 +-
 .../crud/User/CreateOneUserResolver.ts        |   8 +-
 .../crud/User/DeleteManyUserResolver.ts       |   8 +-
 .../crud/User/DeleteOneUserResolver.ts        |   8 +-
 .../crud/User/FindFirstUserOrThrowResolver.ts |   8 +-
 .../crud/User/FindFirstUserResolver.ts        |   8 +-
 .../crud/User/FindManyUserResolver.ts         |   8 +-
 .../User/FindUniqueUserOrThrowResolver.ts     |   8 +-
 .../crud/User/FindUniqueUserResolver.ts       |   8 +-
 .../crud/User/GroupByUserResolver.ts          |   7 +-
 .../crud/User/UpdateManyUserResolver.ts       |   8 +-
 .../crud/User/UpdateOneUserResolver.ts        |   8 +-
 .../crud/User/UpsertOneUserResolver.ts        |   8 +-
 .../resolvers/crud/User/UserCrudResolver.ts   | 110 +++++++-----
 .../resolvers/inputs/CartCreateInput.ts       |   4 +-
 .../resolvers/inputs/CartCreateManyInput.ts   |   4 +-
 .../inputs/CartCreateManyUserInput.ts         |   4 +-
 .../inputs/CartCreateWithoutCartRowsInput.ts  |   4 +-
 .../inputs/CartCreateWithoutUserInput.ts      |   4 +-
 .../resolvers/inputs/CartRowsCreateInput.ts   |   4 +-
 .../inputs/CartRowsCreateManyCartInput.ts     |   4 +-
 .../inputs/CartRowsCreateManyInput.ts         |   4 +-
 .../inputs/CartRowsCreateManyProductInput.ts  |   4 +-
 .../inputs/CartRowsCreateWithoutCartInput.ts  |   4 +-
 .../CartRowsCreateWithoutProductInput.ts      |   4 +-
 .../resolvers/inputs/GeometryInput.ts         |  52 ++++++
 .../resolvers/inputs/ProductCreateInput.ts    |   4 +-
 .../inputs/ProductCreateManyInput.ts          |   4 +-
 .../ProductCreateWithoutCartRowsInput.ts      |   4 +-
 .../resolvers/inputs/UserCreateInput.ts       |   4 +-
 .../resolvers/inputs/UserCreateManyInput.ts   |   4 +-
 .../inputs/UserCreateWithoutCartsInput.ts     |   4 +-
 .../inputs/UserCreateWithoutProvidersInput.ts |   4 +-
 .../UserCreateWithoutRefreshTokenInput.ts     |   4 +-
 back/prisma/seed.ts                           | 158 ++++++++++--------
 back/src/app.module.ts                        |   3 +-
 back/src/main.ts                              |   5 +-
 118 files changed, 1018 insertions(+), 629 deletions(-)
 create mode 100644 back/prisma/generated/type-graphql/resolvers/inputs/GeometryInput.ts

diff --git a/back/.vscode/settings.json b/back/.vscode/settings.json
index 56cc76b..4a32e18 100644
--- a/back/.vscode/settings.json
+++ b/back/.vscode/settings.json
@@ -1,6 +1,6 @@
 {
   "editor.codeActionsOnSave": {
-    "source.fixAll": true
+    "source.fixAll": "explicit"
   },
   "workbench.colorCustomizations": {
     "activityBar.foreground": "#000000",
diff --git a/back/docker-compose.yml b/back/docker-compose.yml
index ef99a32..e20e6db 100644
--- a/back/docker-compose.yml
+++ b/back/docker-compose.yml
@@ -13,10 +13,10 @@ services:
         # condition: service_healthy
     env_file:
       - .env.development
-    volumes:
-      - type: bind
-        source: ./certbot
-        target: /home/certbot
+    # volumes:
+    #   - type: bind
+    #     source: ./certbot
+    #     target: /home/certbot
     # tty: true # interact with the shell
     # stdin_open: true
   kapix-prisma-postgresdb:
diff --git a/back/package.json b/back/package.json
index 41ebbb3..d083904 100644
--- a/back/package.json
+++ b/back/package.json
@@ -12,12 +12,13 @@
     "docker:prod": "docker compose -f docker-compose.prod.yml up --build",
     "docker:prod:down": "docker compose -f docker-compose.prod.yml down",
     "docker:staging": "docker compose -f docker-compose.staging.yml up --build",
+    "docker:dev": "docker compose -f docker-compose.yml up --build",
     "docker:staging:down": "docker compose -f docker-compose.staging.yml down",
 
     "dev": "cross-env NODE_ENV=DEVELOPMENT nest start --watch",
     "dev:no-watch": "cross-env NODE_ENV=DEVELOPMENT nest start",
 
-    "start:dev": "pnpm sync:dev && cross-env NODE_ENV=DEVELOPMENT nest start --watch",
+    "start:dev": "pnpm sync:dev && pnpm seed:dev && cross-env NODE_ENV=DEVELOPMENT nest start --watch",
     "start:staging": "pnpm sync:staging && cross-env NODE_ENV=STAGING node dist/src/main",
     "start:prod": "pnpm sync:prod && cross-env NODE_ENV=PRODUCTION node dist/src/main",
     "start:debug": "nest start --debug --watch",
@@ -117,7 +118,7 @@
     "class-validator": "0.14.0",
     "cross-env": "^7.0.3",
     "fs": "0.0.1-security",
-    "kapix-typegraphql-prisma": "0.26.25",
+    "kapix-typegraphql-prisma": "0.26.28",
     "node-zip": "1.1.1",
     "path": "0.12.7",
     "prisma": "5.4.2",
diff --git a/back/pnpm-lock.yaml b/back/pnpm-lock.yaml
index d74e421..c889985 100644
--- a/back/pnpm-lock.yaml
+++ b/back/pnpm-lock.yaml
@@ -185,8 +185,8 @@ devDependencies:
     specifier: 0.0.1-security
     version: 0.0.1-security
   kapix-typegraphql-prisma:
-    specifier: 0.26.25
-    version: 0.26.25(@prisma/client@5.4.2)(@types/graphql-fields@1.3.9)(@types/node@18.11.18)(graphql-fields@2.0.3)(graphql-scalars@1.22.2)(prisma@5.4.2)(tslib@2.6.0)(type-graphql@2.0.0-beta.1)
+    specifier: 0.26.28
+    version: 0.26.28(@prisma/client@5.4.2)(@types/graphql-fields@1.3.9)(@types/node@18.11.18)(graphql-fields@2.0.3)(graphql-scalars@1.22.2)(prisma@5.4.2)(tslib@2.6.0)(type-graphql@2.0.0-beta.1)
   node-zip:
     specifier: 1.1.1
     version: 1.1.1
@@ -4992,8 +4992,8 @@ packages:
       safe-buffer: 5.2.1
     dev: false
 
-  /kapix-typegraphql-prisma@0.26.25(@prisma/client@5.4.2)(@types/graphql-fields@1.3.9)(@types/node@18.11.18)(graphql-fields@2.0.3)(graphql-scalars@1.22.2)(prisma@5.4.2)(tslib@2.6.0)(type-graphql@2.0.0-beta.1):
-    resolution: {integrity: sha512-5pIFLPIgal9B7spvUsZKANq7gox6q1IK1QB2dJR0zJkX8w/TjbIr5txGEv+Y9RXH6OKlqCYCcEhNy5QX5r+Bsg==}
+  /kapix-typegraphql-prisma@0.26.28(@prisma/client@5.4.2)(@types/graphql-fields@1.3.9)(@types/node@18.11.18)(graphql-fields@2.0.3)(graphql-scalars@1.22.2)(prisma@5.4.2)(tslib@2.6.0)(type-graphql@2.0.0-beta.1):
+    resolution: {integrity: sha512-TYmNioBv8CIVxNPigCCnDCS1OQ2JkZuR+LLJodBBCmCiCSFthu3mB7aP/OG/7azgl/pI8Nph4KLIdHH3ZQ0Tag==}
     engines: {node: '>=12.4'}
     hasBin: true
     peerDependencies:
@@ -5013,6 +5013,7 @@ packages:
       '@types/node': 18.11.18
       graphql-fields: 2.0.3
       graphql-scalars: 1.22.2(graphql@16.6.0)
+      lodash: 4.17.21
       pluralize: 8.0.0
       prisma: 5.4.2
       semver: 7.5.4
diff --git a/back/prisma/generated/type-graphql/helpers.ts b/back/prisma/generated/type-graphql/helpers.ts
index c735feb..3ac5bd5 100644
--- a/back/prisma/generated/type-graphql/helpers.ts
+++ b/back/prisma/generated/type-graphql/helpers.ts
@@ -64,7 +64,7 @@ export type QueryInterceptorOperation = (typeof allQueryNames)[number]
 
 export type MutationInterceptor = {
   onBefore?: (ctx: any, args: any, crudResolver: string, isQuery: boolean, operation: MutationInterceptorOperation | QueryInterceptorOperation) => void | Promise<void>
-  onAfter?: (ctx: any, args: any, crudResolver: string, isQuery: boolean, operation: MutationInterceptorOperation | QueryInterceptorOperation) => void | Promise<void>
+  onAfter?: (ctx: any, args: any, crudResolver: string, isQuery: boolean, operation: MutationInterceptorOperation | QueryInterceptorOperation, result: any) => void | Promise<void>
 }
 
 export const _resolversInterceptors = {}
@@ -75,8 +75,9 @@ export async function onIntercept(
   method: 'onBefore' | 'onAfter',
   operation: MutationInterceptorOperation | QueryInterceptorOperation,
   ctx: any,
-  args: any
-) {
+  args: any,
+  result: any = null
+): Promise<any> {
   const interceptor = _resolversInterceptors[modelName]
   if (interceptor) {
     const isQuery = allQueryNames.includes(operation as any)
@@ -95,7 +96,7 @@ export async function onIntercept(
       if (isArray(args)) {
         await Promise.all(args.map(i => interceptorFunction(ctx, i, crudResolver, isQuery, operation)))
       } else {
-        await interceptorFunction(ctx, args, crudResolver, isQuery, operation)
+        return await interceptorFunction(ctx, args, crudResolver, isQuery, operation, result)
       }
     }
   }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Cart/AggregateCartResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Cart/AggregateCartResolver.ts
index 9fd5222..c234890 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Cart/AggregateCartResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Cart/AggregateCartResolver.ts
@@ -12,11 +12,12 @@ export class AggregateCartResolver {
   })
   async aggregateCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: AggregateCartArgs): Promise<AggregateCart> {
     await onIntercept('Cart', 'aggregateCart', 'onBefore', 'aggregate', ctx, args)
-    const result = getPrismaFromContext(ctx).cart.aggregate({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.cart.aggregate({
       ...args,
       ...transformInfoIntoPrismaArgs(info)
     })
-    await onIntercept('Cart', 'aggregateCart', 'onAfter', 'aggregate', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('Cart', 'aggregateCart', 'onAfter', 'aggregate', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Cart/CartCrudResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Cart/CartCrudResolver.ts
index f9446a2..83290e2 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Cart/CartCrudResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Cart/CartCrudResolver.ts
@@ -27,12 +27,13 @@ export class CartCrudResolver {
   })
   async aggregateCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: AggregateCartArgs): Promise<AggregateCart> {
     await onIntercept('Cart', 'aggregateCart', 'onBefore', 'aggregate', ctx, args)
-    const result = getPrismaFromContext(ctx).cart.aggregate({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.cart.aggregate({
       ...args,
       ...transformInfoIntoPrismaArgs(info)
     })
-    await onIntercept('Cart', 'aggregateCart', 'onAfter', 'aggregate', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('Cart', 'aggregateCart', 'onAfter', 'aggregate', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
@@ -41,12 +42,14 @@ export class CartCrudResolver {
   async createManyCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateManyCartArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'createManyCart', 'onBefore', 'createMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.createMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.createMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'createManyCart', 'onAfter', 'createMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'createManyCart', 'onAfter', 'createMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => Cart, {
@@ -55,12 +58,14 @@ export class CartCrudResolver {
   async createOneCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateOneCartArgs): Promise<Cart> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'createOneCart', 'onBefore', 'create', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.create({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.create({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'createOneCart', 'onAfter', 'create', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'createOneCart', 'onAfter', 'create', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
@@ -69,12 +74,14 @@ export class CartCrudResolver {
   async deleteManyCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteManyCartArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'deleteManyCart', 'onBefore', 'deleteMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.deleteMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.deleteMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'deleteManyCart', 'onAfter', 'deleteMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'deleteManyCart', 'onAfter', 'deleteMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => Cart, {
@@ -83,12 +90,14 @@ export class CartCrudResolver {
   async deleteOneCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteOneCartArgs): Promise<Cart | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'deleteOneCart', 'onBefore', 'delete', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.delete({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.delete({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'deleteOneCart', 'onAfter', 'delete', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'deleteOneCart', 'onAfter', 'delete', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => Cart, {
@@ -97,12 +106,14 @@ export class CartCrudResolver {
   async findFirstCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstCartArgs): Promise<Cart | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'findFirstCart', 'onBefore', 'findFirst', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.findFirst({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.findFirst({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'findFirstCart', 'onAfter', 'findFirst', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'findFirstCart', 'onAfter', 'findFirst', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => Cart, {
@@ -111,12 +122,14 @@ export class CartCrudResolver {
   async findFirstCartOrThrow(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstCartOrThrowArgs): Promise<Cart | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'findFirstCartOrThrow', 'onBefore', 'findFirstOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.findFirstOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.findFirstOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'findFirstCartOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'findFirstCartOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => [Cart], {
@@ -125,12 +138,14 @@ export class CartCrudResolver {
   async carts(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindManyCartArgs): Promise<Cart[]> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'carts', 'onBefore', 'findMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.findMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.findMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'carts', 'onAfter', 'findMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'carts', 'onAfter', 'findMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => Cart, {
@@ -139,12 +154,14 @@ export class CartCrudResolver {
   async cart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueCartArgs): Promise<Cart | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'cart', 'onBefore', 'findUnique', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.findUnique({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.findUnique({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'cart', 'onAfter', 'findUnique', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'cart', 'onAfter', 'findUnique', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => Cart, {
@@ -153,12 +170,14 @@ export class CartCrudResolver {
   async getCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueCartOrThrowArgs): Promise<Cart | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'getCart', 'onBefore', 'findUniqueOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.findUniqueOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.findUniqueOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'getCart', 'onAfter', 'findUniqueOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'getCart', 'onAfter', 'findUniqueOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => [CartGroupBy], {
@@ -167,14 +186,15 @@ export class CartCrudResolver {
   async groupByCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: GroupByCartArgs): Promise<CartGroupBy[]> {
     const { _count, _avg, _sum, _min, _max } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'groupByCart', 'onBefore', 'groupBy', ctx, args)
-    const result = getPrismaFromContext(ctx).cart.groupBy({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.cart.groupBy({
       ...args,
       ...Object.fromEntries(
         Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)
       )
     })
-    await onIntercept('Cart', 'groupByCart', 'onAfter', 'groupBy', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('Cart', 'groupByCart', 'onAfter', 'groupBy', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
@@ -183,12 +203,14 @@ export class CartCrudResolver {
   async updateManyCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateManyCartArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'updateManyCart', 'onBefore', 'updateMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.updateMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.updateMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'updateManyCart', 'onAfter', 'updateMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'updateManyCart', 'onAfter', 'updateMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => Cart, {
@@ -197,12 +219,14 @@ export class CartCrudResolver {
   async updateOneCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateOneCartArgs): Promise<Cart | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'updateOneCart', 'onBefore', 'update', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.update({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.update({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'updateOneCart', 'onAfter', 'update', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'updateOneCart', 'onAfter', 'update', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => Cart, {
@@ -211,11 +235,13 @@ export class CartCrudResolver {
   async upsertOneCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpsertOneCartArgs): Promise<Cart> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'upsertOneCart', 'onBefore', 'upsert', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.upsert({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.upsert({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'upsertOneCart', 'onAfter', 'upsert', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'upsertOneCart', 'onAfter', 'upsert', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Cart/CreateManyCartResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Cart/CreateManyCartResolver.ts
index dd549b5..6b6f08a 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Cart/CreateManyCartResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Cart/CreateManyCartResolver.ts
@@ -13,11 +13,13 @@ export class CreateManyCartResolver {
   async createManyCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateManyCartArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'createManyCart', 'onBefore', 'createMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.createMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.createMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'createManyCart', 'onAfter', 'createMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'createManyCart', 'onAfter', 'createMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Cart/CreateOneCartResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Cart/CreateOneCartResolver.ts
index 28bb057..7987434 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Cart/CreateOneCartResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Cart/CreateOneCartResolver.ts
@@ -12,11 +12,13 @@ export class CreateOneCartResolver {
   async createOneCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateOneCartArgs): Promise<Cart> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'createOneCart', 'onBefore', 'create', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.create({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.create({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'createOneCart', 'onAfter', 'create', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'createOneCart', 'onAfter', 'create', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Cart/DeleteManyCartResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Cart/DeleteManyCartResolver.ts
index 271cc55..7912923 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Cart/DeleteManyCartResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Cart/DeleteManyCartResolver.ts
@@ -13,11 +13,13 @@ export class DeleteManyCartResolver {
   async deleteManyCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteManyCartArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'deleteManyCart', 'onBefore', 'deleteMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.deleteMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.deleteMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'deleteManyCart', 'onAfter', 'deleteMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'deleteManyCart', 'onAfter', 'deleteMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Cart/DeleteOneCartResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Cart/DeleteOneCartResolver.ts
index ead11a4..7ffe9e1 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Cart/DeleteOneCartResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Cart/DeleteOneCartResolver.ts
@@ -12,11 +12,13 @@ export class DeleteOneCartResolver {
   async deleteOneCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteOneCartArgs): Promise<Cart | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'deleteOneCart', 'onBefore', 'delete', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.delete({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.delete({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'deleteOneCart', 'onAfter', 'delete', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'deleteOneCart', 'onAfter', 'delete', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Cart/FindFirstCartOrThrowResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Cart/FindFirstCartOrThrowResolver.ts
index 4e95c8e..f5e9d99 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Cart/FindFirstCartOrThrowResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Cart/FindFirstCartOrThrowResolver.ts
@@ -12,11 +12,13 @@ export class FindFirstCartOrThrowResolver {
   async findFirstCartOrThrow(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstCartOrThrowArgs): Promise<Cart | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'findFirstCartOrThrow', 'onBefore', 'findFirstOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.findFirstOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.findFirstOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'findFirstCartOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'findFirstCartOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Cart/FindFirstCartResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Cart/FindFirstCartResolver.ts
index b3f7562..f0b5b47 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Cart/FindFirstCartResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Cart/FindFirstCartResolver.ts
@@ -12,11 +12,13 @@ export class FindFirstCartResolver {
   async findFirstCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstCartArgs): Promise<Cart | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'findFirstCart', 'onBefore', 'findFirst', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.findFirst({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.findFirst({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'findFirstCart', 'onAfter', 'findFirst', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'findFirstCart', 'onAfter', 'findFirst', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Cart/FindManyCartResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Cart/FindManyCartResolver.ts
index b6d6db0..a93c45d 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Cart/FindManyCartResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Cart/FindManyCartResolver.ts
@@ -12,11 +12,13 @@ export class FindManyCartResolver {
   async carts(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindManyCartArgs): Promise<Cart[]> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'carts', 'onBefore', 'findMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.findMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.findMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'carts', 'onAfter', 'findMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'carts', 'onAfter', 'findMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Cart/FindUniqueCartOrThrowResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Cart/FindUniqueCartOrThrowResolver.ts
index c6a71ef..7c1b4ec 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Cart/FindUniqueCartOrThrowResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Cart/FindUniqueCartOrThrowResolver.ts
@@ -12,11 +12,13 @@ export class FindUniqueCartOrThrowResolver {
   async getCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueCartOrThrowArgs): Promise<Cart | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'getCart', 'onBefore', 'findUniqueOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.findUniqueOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.findUniqueOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'getCart', 'onAfter', 'findUniqueOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'getCart', 'onAfter', 'findUniqueOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Cart/FindUniqueCartResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Cart/FindUniqueCartResolver.ts
index 076957d..d7832ab 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Cart/FindUniqueCartResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Cart/FindUniqueCartResolver.ts
@@ -12,11 +12,13 @@ export class FindUniqueCartResolver {
   async cart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueCartArgs): Promise<Cart | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'cart', 'onBefore', 'findUnique', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.findUnique({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.findUnique({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'cart', 'onAfter', 'findUnique', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'cart', 'onAfter', 'findUnique', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Cart/GroupByCartResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Cart/GroupByCartResolver.ts
index 6cbf997..218b2c8 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Cart/GroupByCartResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Cart/GroupByCartResolver.ts
@@ -13,13 +13,14 @@ export class GroupByCartResolver {
   async groupByCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: GroupByCartArgs): Promise<CartGroupBy[]> {
     const { _count, _avg, _sum, _min, _max } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'groupByCart', 'onBefore', 'groupBy', ctx, args)
-    const result = getPrismaFromContext(ctx).cart.groupBy({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.cart.groupBy({
       ...args,
       ...Object.fromEntries(
         Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)
       )
     })
-    await onIntercept('Cart', 'groupByCart', 'onAfter', 'groupBy', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('Cart', 'groupByCart', 'onAfter', 'groupBy', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Cart/UpdateManyCartResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Cart/UpdateManyCartResolver.ts
index beefb55..0e92893 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Cart/UpdateManyCartResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Cart/UpdateManyCartResolver.ts
@@ -13,11 +13,13 @@ export class UpdateManyCartResolver {
   async updateManyCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateManyCartArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'updateManyCart', 'onBefore', 'updateMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.updateMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.updateMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'updateManyCart', 'onAfter', 'updateMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'updateManyCart', 'onAfter', 'updateMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Cart/UpdateOneCartResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Cart/UpdateOneCartResolver.ts
index 29c7ad4..8ad2c41 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Cart/UpdateOneCartResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Cart/UpdateOneCartResolver.ts
@@ -12,11 +12,13 @@ export class UpdateOneCartResolver {
   async updateOneCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateOneCartArgs): Promise<Cart | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'updateOneCart', 'onBefore', 'update', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.update({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.update({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'updateOneCart', 'onAfter', 'update', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'updateOneCart', 'onAfter', 'update', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Cart/UpsertOneCartResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Cart/UpsertOneCartResolver.ts
index f7b3776..38f5272 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Cart/UpsertOneCartResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Cart/UpsertOneCartResolver.ts
@@ -12,11 +12,13 @@ export class UpsertOneCartResolver {
   async upsertOneCart(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpsertOneCartArgs): Promise<Cart> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Cart', 'upsertOneCart', 'onBefore', 'upsert', ctx, args)
-    const result = await getPrismaFromContext(ctx).cart.upsert({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cart.upsert({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Cart', 'upsertOneCart', 'onAfter', 'upsert', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Cart', 'upsertOneCart', 'onAfter', 'upsert', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/AggregateCartRowsResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/AggregateCartRowsResolver.ts
index f291667..e8cf6d6 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/AggregateCartRowsResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/AggregateCartRowsResolver.ts
@@ -12,11 +12,12 @@ export class AggregateCartRowsResolver {
   })
   async aggregateCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: AggregateCartRowsArgs): Promise<AggregateCartRows> {
     await onIntercept('CartRows', 'aggregateCartRows', 'onBefore', 'aggregate', ctx, args)
-    const result = getPrismaFromContext(ctx).cartRows.aggregate({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.cartRows.aggregate({
       ...args,
       ...transformInfoIntoPrismaArgs(info)
     })
-    await onIntercept('CartRows', 'aggregateCartRows', 'onAfter', 'aggregate', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('CartRows', 'aggregateCartRows', 'onAfter', 'aggregate', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/CartRowsCrudResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/CartRowsCrudResolver.ts
index 6692e3c..5e929bc 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/CartRowsCrudResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/CartRowsCrudResolver.ts
@@ -27,12 +27,13 @@ export class CartRowsCrudResolver {
   })
   async aggregateCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: AggregateCartRowsArgs): Promise<AggregateCartRows> {
     await onIntercept('CartRows', 'aggregateCartRows', 'onBefore', 'aggregate', ctx, args)
-    const result = getPrismaFromContext(ctx).cartRows.aggregate({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.cartRows.aggregate({
       ...args,
       ...transformInfoIntoPrismaArgs(info)
     })
-    await onIntercept('CartRows', 'aggregateCartRows', 'onAfter', 'aggregate', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('CartRows', 'aggregateCartRows', 'onAfter', 'aggregate', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
@@ -41,12 +42,14 @@ export class CartRowsCrudResolver {
   async createManyCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateManyCartRowsArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'createManyCartRows', 'onBefore', 'createMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.createMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.createMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'createManyCartRows', 'onAfter', 'createMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'createManyCartRows', 'onAfter', 'createMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => CartRows, {
@@ -55,12 +58,14 @@ export class CartRowsCrudResolver {
   async createOneCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateOneCartRowsArgs): Promise<CartRows> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'createOneCartRows', 'onBefore', 'create', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.create({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.create({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'createOneCartRows', 'onAfter', 'create', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'createOneCartRows', 'onAfter', 'create', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
@@ -69,12 +74,14 @@ export class CartRowsCrudResolver {
   async deleteManyCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteManyCartRowsArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'deleteManyCartRows', 'onBefore', 'deleteMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.deleteMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.deleteMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'deleteManyCartRows', 'onAfter', 'deleteMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'deleteManyCartRows', 'onAfter', 'deleteMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => CartRows, {
@@ -83,12 +90,14 @@ export class CartRowsCrudResolver {
   async deleteOneCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteOneCartRowsArgs): Promise<CartRows | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'deleteOneCartRows', 'onBefore', 'delete', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.delete({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.delete({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'deleteOneCartRows', 'onAfter', 'delete', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'deleteOneCartRows', 'onAfter', 'delete', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => CartRows, {
@@ -97,12 +106,14 @@ export class CartRowsCrudResolver {
   async findFirstCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstCartRowsArgs): Promise<CartRows | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'findFirstCartRows', 'onBefore', 'findFirst', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.findFirst({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.findFirst({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'findFirstCartRows', 'onAfter', 'findFirst', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'findFirstCartRows', 'onAfter', 'findFirst', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => CartRows, {
@@ -111,12 +122,14 @@ export class CartRowsCrudResolver {
   async findFirstCartRowsOrThrow(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstCartRowsOrThrowArgs): Promise<CartRows | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'findFirstCartRowsOrThrow', 'onBefore', 'findFirstOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.findFirstOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.findFirstOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'findFirstCartRowsOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'findFirstCartRowsOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => [CartRows], {
@@ -125,12 +138,14 @@ export class CartRowsCrudResolver {
   async findManyCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindManyCartRowsArgs): Promise<CartRows[]> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'findManyCartRows', 'onBefore', 'findMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.findMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.findMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'findManyCartRows', 'onAfter', 'findMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'findManyCartRows', 'onAfter', 'findMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => CartRows, {
@@ -139,12 +154,14 @@ export class CartRowsCrudResolver {
   async findUniqueCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueCartRowsArgs): Promise<CartRows | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'findUniqueCartRows', 'onBefore', 'findUnique', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.findUnique({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.findUnique({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'findUniqueCartRows', 'onAfter', 'findUnique', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'findUniqueCartRows', 'onAfter', 'findUnique', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => CartRows, {
@@ -153,12 +170,14 @@ export class CartRowsCrudResolver {
   async findUniqueCartRowsOrThrow(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueCartRowsOrThrowArgs): Promise<CartRows | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'findUniqueCartRowsOrThrow', 'onBefore', 'findUniqueOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.findUniqueOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.findUniqueOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'findUniqueCartRowsOrThrow', 'onAfter', 'findUniqueOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'findUniqueCartRowsOrThrow', 'onAfter', 'findUniqueOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => [CartRowsGroupBy], {
@@ -167,14 +186,15 @@ export class CartRowsCrudResolver {
   async groupByCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: GroupByCartRowsArgs): Promise<CartRowsGroupBy[]> {
     const { _count, _avg, _sum, _min, _max } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'groupByCartRows', 'onBefore', 'groupBy', ctx, args)
-    const result = getPrismaFromContext(ctx).cartRows.groupBy({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.cartRows.groupBy({
       ...args,
       ...Object.fromEntries(
         Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)
       )
     })
-    await onIntercept('CartRows', 'groupByCartRows', 'onAfter', 'groupBy', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('CartRows', 'groupByCartRows', 'onAfter', 'groupBy', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
@@ -183,12 +203,14 @@ export class CartRowsCrudResolver {
   async updateManyCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateManyCartRowsArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'updateManyCartRows', 'onBefore', 'updateMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.updateMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.updateMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'updateManyCartRows', 'onAfter', 'updateMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'updateManyCartRows', 'onAfter', 'updateMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => CartRows, {
@@ -197,12 +219,14 @@ export class CartRowsCrudResolver {
   async updateOneCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateOneCartRowsArgs): Promise<CartRows | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'updateOneCartRows', 'onBefore', 'update', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.update({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.update({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'updateOneCartRows', 'onAfter', 'update', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'updateOneCartRows', 'onAfter', 'update', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => CartRows, {
@@ -211,11 +235,13 @@ export class CartRowsCrudResolver {
   async upsertOneCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpsertOneCartRowsArgs): Promise<CartRows> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'upsertOneCartRows', 'onBefore', 'upsert', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.upsert({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.upsert({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'upsertOneCartRows', 'onAfter', 'upsert', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'upsertOneCartRows', 'onAfter', 'upsert', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/CreateManyCartRowsResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/CreateManyCartRowsResolver.ts
index 44ceb7f..e50008b 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/CreateManyCartRowsResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/CreateManyCartRowsResolver.ts
@@ -13,11 +13,13 @@ export class CreateManyCartRowsResolver {
   async createManyCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateManyCartRowsArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'createManyCartRows', 'onBefore', 'createMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.createMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.createMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'createManyCartRows', 'onAfter', 'createMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'createManyCartRows', 'onAfter', 'createMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/CreateOneCartRowsResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/CreateOneCartRowsResolver.ts
index da9f2cf..bb79b68 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/CreateOneCartRowsResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/CreateOneCartRowsResolver.ts
@@ -12,11 +12,13 @@ export class CreateOneCartRowsResolver {
   async createOneCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateOneCartRowsArgs): Promise<CartRows> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'createOneCartRows', 'onBefore', 'create', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.create({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.create({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'createOneCartRows', 'onAfter', 'create', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'createOneCartRows', 'onAfter', 'create', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/DeleteManyCartRowsResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/DeleteManyCartRowsResolver.ts
index 04cc731..2b4f653 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/DeleteManyCartRowsResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/DeleteManyCartRowsResolver.ts
@@ -13,11 +13,13 @@ export class DeleteManyCartRowsResolver {
   async deleteManyCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteManyCartRowsArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'deleteManyCartRows', 'onBefore', 'deleteMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.deleteMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.deleteMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'deleteManyCartRows', 'onAfter', 'deleteMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'deleteManyCartRows', 'onAfter', 'deleteMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/DeleteOneCartRowsResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/DeleteOneCartRowsResolver.ts
index 0c17662..e4c4bd3 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/DeleteOneCartRowsResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/DeleteOneCartRowsResolver.ts
@@ -12,11 +12,13 @@ export class DeleteOneCartRowsResolver {
   async deleteOneCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteOneCartRowsArgs): Promise<CartRows | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'deleteOneCartRows', 'onBefore', 'delete', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.delete({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.delete({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'deleteOneCartRows', 'onAfter', 'delete', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'deleteOneCartRows', 'onAfter', 'delete', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/FindFirstCartRowsOrThrowResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/FindFirstCartRowsOrThrowResolver.ts
index 39d2437..1b8cb2e 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/FindFirstCartRowsOrThrowResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/FindFirstCartRowsOrThrowResolver.ts
@@ -12,11 +12,13 @@ export class FindFirstCartRowsOrThrowResolver {
   async findFirstCartRowsOrThrow(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstCartRowsOrThrowArgs): Promise<CartRows | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'findFirstCartRowsOrThrow', 'onBefore', 'findFirstOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.findFirstOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.findFirstOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'findFirstCartRowsOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'findFirstCartRowsOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/FindFirstCartRowsResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/FindFirstCartRowsResolver.ts
index c02efa7..0a94571 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/FindFirstCartRowsResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/FindFirstCartRowsResolver.ts
@@ -12,11 +12,13 @@ export class FindFirstCartRowsResolver {
   async findFirstCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstCartRowsArgs): Promise<CartRows | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'findFirstCartRows', 'onBefore', 'findFirst', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.findFirst({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.findFirst({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'findFirstCartRows', 'onAfter', 'findFirst', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'findFirstCartRows', 'onAfter', 'findFirst', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/FindManyCartRowsResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/FindManyCartRowsResolver.ts
index 5d9fe3e..1ecdf46 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/FindManyCartRowsResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/FindManyCartRowsResolver.ts
@@ -12,11 +12,13 @@ export class FindManyCartRowsResolver {
   async findManyCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindManyCartRowsArgs): Promise<CartRows[]> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'findManyCartRows', 'onBefore', 'findMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.findMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.findMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'findManyCartRows', 'onAfter', 'findMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'findManyCartRows', 'onAfter', 'findMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/FindUniqueCartRowsOrThrowResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/FindUniqueCartRowsOrThrowResolver.ts
index 773c5fe..12425a3 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/FindUniqueCartRowsOrThrowResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/FindUniqueCartRowsOrThrowResolver.ts
@@ -12,11 +12,13 @@ export class FindUniqueCartRowsOrThrowResolver {
   async findUniqueCartRowsOrThrow(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueCartRowsOrThrowArgs): Promise<CartRows | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'findUniqueCartRowsOrThrow', 'onBefore', 'findUniqueOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.findUniqueOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.findUniqueOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'findUniqueCartRowsOrThrow', 'onAfter', 'findUniqueOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'findUniqueCartRowsOrThrow', 'onAfter', 'findUniqueOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/FindUniqueCartRowsResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/FindUniqueCartRowsResolver.ts
index 3062e35..e182b29 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/FindUniqueCartRowsResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/FindUniqueCartRowsResolver.ts
@@ -12,11 +12,13 @@ export class FindUniqueCartRowsResolver {
   async findUniqueCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueCartRowsArgs): Promise<CartRows | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'findUniqueCartRows', 'onBefore', 'findUnique', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.findUnique({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.findUnique({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'findUniqueCartRows', 'onAfter', 'findUnique', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'findUniqueCartRows', 'onAfter', 'findUnique', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/GroupByCartRowsResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/GroupByCartRowsResolver.ts
index 54577de..eb117b4 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/GroupByCartRowsResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/GroupByCartRowsResolver.ts
@@ -13,13 +13,14 @@ export class GroupByCartRowsResolver {
   async groupByCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: GroupByCartRowsArgs): Promise<CartRowsGroupBy[]> {
     const { _count, _avg, _sum, _min, _max } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'groupByCartRows', 'onBefore', 'groupBy', ctx, args)
-    const result = getPrismaFromContext(ctx).cartRows.groupBy({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.cartRows.groupBy({
       ...args,
       ...Object.fromEntries(
         Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)
       )
     })
-    await onIntercept('CartRows', 'groupByCartRows', 'onAfter', 'groupBy', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('CartRows', 'groupByCartRows', 'onAfter', 'groupBy', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/UpdateManyCartRowsResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/UpdateManyCartRowsResolver.ts
index 06c52f0..8c8f9dd 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/UpdateManyCartRowsResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/UpdateManyCartRowsResolver.ts
@@ -13,11 +13,13 @@ export class UpdateManyCartRowsResolver {
   async updateManyCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateManyCartRowsArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'updateManyCartRows', 'onBefore', 'updateMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.updateMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.updateMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'updateManyCartRows', 'onAfter', 'updateMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'updateManyCartRows', 'onAfter', 'updateMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/UpdateOneCartRowsResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/UpdateOneCartRowsResolver.ts
index bbcb2d8..ea86d9d 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/UpdateOneCartRowsResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/UpdateOneCartRowsResolver.ts
@@ -12,11 +12,13 @@ export class UpdateOneCartRowsResolver {
   async updateOneCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateOneCartRowsArgs): Promise<CartRows | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'updateOneCartRows', 'onBefore', 'update', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.update({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.update({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'updateOneCartRows', 'onAfter', 'update', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'updateOneCartRows', 'onAfter', 'update', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/UpsertOneCartRowsResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/UpsertOneCartRowsResolver.ts
index 83a5a72..03e88d5 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/CartRows/UpsertOneCartRowsResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/CartRows/UpsertOneCartRowsResolver.ts
@@ -12,11 +12,13 @@ export class UpsertOneCartRowsResolver {
   async upsertOneCartRows(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpsertOneCartRowsArgs): Promise<CartRows> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('CartRows', 'upsertOneCartRows', 'onBefore', 'upsert', ctx, args)
-    const result = await getPrismaFromContext(ctx).cartRows.upsert({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.cartRows.upsert({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('CartRows', 'upsertOneCartRows', 'onAfter', 'upsert', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('CartRows', 'upsertOneCartRows', 'onAfter', 'upsert', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Product/AggregateProductResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Product/AggregateProductResolver.ts
index 3d8799f..4d60174 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Product/AggregateProductResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Product/AggregateProductResolver.ts
@@ -12,11 +12,12 @@ export class AggregateProductResolver {
   })
   async aggregateProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: AggregateProductArgs): Promise<AggregateProduct> {
     await onIntercept('Product', 'aggregateProduct', 'onBefore', 'aggregate', ctx, args)
-    const result = getPrismaFromContext(ctx).product.aggregate({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.product.aggregate({
       ...args,
       ...transformInfoIntoPrismaArgs(info)
     })
-    await onIntercept('Product', 'aggregateProduct', 'onAfter', 'aggregate', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('Product', 'aggregateProduct', 'onAfter', 'aggregate', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Product/CreateManyProductResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Product/CreateManyProductResolver.ts
index b55f661..0bc53b8 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Product/CreateManyProductResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Product/CreateManyProductResolver.ts
@@ -13,11 +13,13 @@ export class CreateManyProductResolver {
   async createManyProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateManyProductArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'createManyProduct', 'onBefore', 'createMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.createMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.createMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'createManyProduct', 'onAfter', 'createMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'createManyProduct', 'onAfter', 'createMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Product/CreateOneProductResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Product/CreateOneProductResolver.ts
index d957365..31b3788 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Product/CreateOneProductResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Product/CreateOneProductResolver.ts
@@ -12,11 +12,13 @@ export class CreateOneProductResolver {
   async createOneProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateOneProductArgs): Promise<Product> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'createOneProduct', 'onBefore', 'create', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.create({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.create({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'createOneProduct', 'onAfter', 'create', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'createOneProduct', 'onAfter', 'create', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Product/DeleteManyProductResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Product/DeleteManyProductResolver.ts
index 64901dc..83ad9ee 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Product/DeleteManyProductResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Product/DeleteManyProductResolver.ts
@@ -13,11 +13,13 @@ export class DeleteManyProductResolver {
   async deleteManyProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteManyProductArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'deleteManyProduct', 'onBefore', 'deleteMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.deleteMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.deleteMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'deleteManyProduct', 'onAfter', 'deleteMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'deleteManyProduct', 'onAfter', 'deleteMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Product/DeleteOneProductResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Product/DeleteOneProductResolver.ts
index 39cf57c..d5a756e 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Product/DeleteOneProductResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Product/DeleteOneProductResolver.ts
@@ -12,11 +12,13 @@ export class DeleteOneProductResolver {
   async deleteOneProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteOneProductArgs): Promise<Product | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'deleteOneProduct', 'onBefore', 'delete', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.delete({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.delete({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'deleteOneProduct', 'onAfter', 'delete', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'deleteOneProduct', 'onAfter', 'delete', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Product/FindFirstProductOrThrowResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Product/FindFirstProductOrThrowResolver.ts
index 8f1a89d..c2bc561 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Product/FindFirstProductOrThrowResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Product/FindFirstProductOrThrowResolver.ts
@@ -12,11 +12,13 @@ export class FindFirstProductOrThrowResolver {
   async findFirstProductOrThrow(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstProductOrThrowArgs): Promise<Product | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'findFirstProductOrThrow', 'onBefore', 'findFirstOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.findFirstOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.findFirstOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'findFirstProductOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'findFirstProductOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Product/FindFirstProductResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Product/FindFirstProductResolver.ts
index 5dfed9e..8748ab5 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Product/FindFirstProductResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Product/FindFirstProductResolver.ts
@@ -12,11 +12,13 @@ export class FindFirstProductResolver {
   async findFirstProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstProductArgs): Promise<Product | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'findFirstProduct', 'onBefore', 'findFirst', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.findFirst({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.findFirst({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'findFirstProduct', 'onAfter', 'findFirst', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'findFirstProduct', 'onAfter', 'findFirst', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Product/FindManyProductResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Product/FindManyProductResolver.ts
index a4d7b60..c3a1ad8 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Product/FindManyProductResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Product/FindManyProductResolver.ts
@@ -12,11 +12,13 @@ export class FindManyProductResolver {
   async products(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindManyProductArgs): Promise<Product[]> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'products', 'onBefore', 'findMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.findMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.findMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'products', 'onAfter', 'findMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'products', 'onAfter', 'findMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Product/FindUniqueProductOrThrowResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Product/FindUniqueProductOrThrowResolver.ts
index 5964e06..05319b6 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Product/FindUniqueProductOrThrowResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Product/FindUniqueProductOrThrowResolver.ts
@@ -12,11 +12,13 @@ export class FindUniqueProductOrThrowResolver {
   async getProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueProductOrThrowArgs): Promise<Product | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'getProduct', 'onBefore', 'findUniqueOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.findUniqueOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.findUniqueOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'getProduct', 'onAfter', 'findUniqueOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'getProduct', 'onAfter', 'findUniqueOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Product/FindUniqueProductResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Product/FindUniqueProductResolver.ts
index d14ab4e..1cf4d28 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Product/FindUniqueProductResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Product/FindUniqueProductResolver.ts
@@ -12,11 +12,13 @@ export class FindUniqueProductResolver {
   async product(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueProductArgs): Promise<Product | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'product', 'onBefore', 'findUnique', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.findUnique({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.findUnique({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'product', 'onAfter', 'findUnique', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'product', 'onAfter', 'findUnique', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Product/GroupByProductResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Product/GroupByProductResolver.ts
index 8929668..c85a1b5 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Product/GroupByProductResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Product/GroupByProductResolver.ts
@@ -13,13 +13,14 @@ export class GroupByProductResolver {
   async groupByProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: GroupByProductArgs): Promise<ProductGroupBy[]> {
     const { _count, _avg, _sum, _min, _max } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'groupByProduct', 'onBefore', 'groupBy', ctx, args)
-    const result = getPrismaFromContext(ctx).product.groupBy({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.product.groupBy({
       ...args,
       ...Object.fromEntries(
         Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)
       )
     })
-    await onIntercept('Product', 'groupByProduct', 'onAfter', 'groupBy', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('Product', 'groupByProduct', 'onAfter', 'groupBy', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Product/ProductCrudResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Product/ProductCrudResolver.ts
index 776238d..cab58c6 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Product/ProductCrudResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Product/ProductCrudResolver.ts
@@ -27,12 +27,13 @@ export class ProductCrudResolver {
   })
   async aggregateProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: AggregateProductArgs): Promise<AggregateProduct> {
     await onIntercept('Product', 'aggregateProduct', 'onBefore', 'aggregate', ctx, args)
-    const result = getPrismaFromContext(ctx).product.aggregate({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.product.aggregate({
       ...args,
       ...transformInfoIntoPrismaArgs(info)
     })
-    await onIntercept('Product', 'aggregateProduct', 'onAfter', 'aggregate', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('Product', 'aggregateProduct', 'onAfter', 'aggregate', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
@@ -41,12 +42,14 @@ export class ProductCrudResolver {
   async createManyProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateManyProductArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'createManyProduct', 'onBefore', 'createMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.createMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.createMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'createManyProduct', 'onAfter', 'createMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'createManyProduct', 'onAfter', 'createMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => Product, {
@@ -55,12 +58,14 @@ export class ProductCrudResolver {
   async createOneProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateOneProductArgs): Promise<Product> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'createOneProduct', 'onBefore', 'create', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.create({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.create({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'createOneProduct', 'onAfter', 'create', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'createOneProduct', 'onAfter', 'create', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
@@ -69,12 +74,14 @@ export class ProductCrudResolver {
   async deleteManyProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteManyProductArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'deleteManyProduct', 'onBefore', 'deleteMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.deleteMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.deleteMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'deleteManyProduct', 'onAfter', 'deleteMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'deleteManyProduct', 'onAfter', 'deleteMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => Product, {
@@ -83,12 +90,14 @@ export class ProductCrudResolver {
   async deleteOneProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteOneProductArgs): Promise<Product | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'deleteOneProduct', 'onBefore', 'delete', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.delete({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.delete({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'deleteOneProduct', 'onAfter', 'delete', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'deleteOneProduct', 'onAfter', 'delete', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => Product, {
@@ -97,12 +106,14 @@ export class ProductCrudResolver {
   async findFirstProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstProductArgs): Promise<Product | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'findFirstProduct', 'onBefore', 'findFirst', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.findFirst({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.findFirst({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'findFirstProduct', 'onAfter', 'findFirst', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'findFirstProduct', 'onAfter', 'findFirst', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => Product, {
@@ -111,12 +122,14 @@ export class ProductCrudResolver {
   async findFirstProductOrThrow(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstProductOrThrowArgs): Promise<Product | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'findFirstProductOrThrow', 'onBefore', 'findFirstOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.findFirstOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.findFirstOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'findFirstProductOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'findFirstProductOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => [Product], {
@@ -125,12 +138,14 @@ export class ProductCrudResolver {
   async products(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindManyProductArgs): Promise<Product[]> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'products', 'onBefore', 'findMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.findMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.findMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'products', 'onAfter', 'findMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'products', 'onAfter', 'findMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => Product, {
@@ -139,12 +154,14 @@ export class ProductCrudResolver {
   async product(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueProductArgs): Promise<Product | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'product', 'onBefore', 'findUnique', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.findUnique({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.findUnique({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'product', 'onAfter', 'findUnique', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'product', 'onAfter', 'findUnique', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => Product, {
@@ -153,12 +170,14 @@ export class ProductCrudResolver {
   async getProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueProductOrThrowArgs): Promise<Product | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'getProduct', 'onBefore', 'findUniqueOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.findUniqueOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.findUniqueOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'getProduct', 'onAfter', 'findUniqueOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'getProduct', 'onAfter', 'findUniqueOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => [ProductGroupBy], {
@@ -167,14 +186,15 @@ export class ProductCrudResolver {
   async groupByProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: GroupByProductArgs): Promise<ProductGroupBy[]> {
     const { _count, _avg, _sum, _min, _max } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'groupByProduct', 'onBefore', 'groupBy', ctx, args)
-    const result = getPrismaFromContext(ctx).product.groupBy({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.product.groupBy({
       ...args,
       ...Object.fromEntries(
         Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)
       )
     })
-    await onIntercept('Product', 'groupByProduct', 'onAfter', 'groupBy', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('Product', 'groupByProduct', 'onAfter', 'groupBy', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
@@ -183,12 +203,14 @@ export class ProductCrudResolver {
   async updateManyProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateManyProductArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'updateManyProduct', 'onBefore', 'updateMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.updateMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.updateMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'updateManyProduct', 'onAfter', 'updateMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'updateManyProduct', 'onAfter', 'updateMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => Product, {
@@ -197,12 +219,14 @@ export class ProductCrudResolver {
   async updateOneProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateOneProductArgs): Promise<Product | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'updateOneProduct', 'onBefore', 'update', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.update({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.update({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'updateOneProduct', 'onAfter', 'update', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'updateOneProduct', 'onAfter', 'update', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => Product, {
@@ -211,11 +235,13 @@ export class ProductCrudResolver {
   async upsertOneProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpsertOneProductArgs): Promise<Product> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'upsertOneProduct', 'onBefore', 'upsert', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.upsert({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.upsert({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'upsertOneProduct', 'onAfter', 'upsert', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'upsertOneProduct', 'onAfter', 'upsert', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Product/UpdateManyProductResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Product/UpdateManyProductResolver.ts
index 6816b97..8dfdccf 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Product/UpdateManyProductResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Product/UpdateManyProductResolver.ts
@@ -13,11 +13,13 @@ export class UpdateManyProductResolver {
   async updateManyProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateManyProductArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'updateManyProduct', 'onBefore', 'updateMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.updateMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.updateMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'updateManyProduct', 'onAfter', 'updateMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'updateManyProduct', 'onAfter', 'updateMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Product/UpdateOneProductResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Product/UpdateOneProductResolver.ts
index eb0e96d..9753544 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Product/UpdateOneProductResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Product/UpdateOneProductResolver.ts
@@ -12,11 +12,13 @@ export class UpdateOneProductResolver {
   async updateOneProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateOneProductArgs): Promise<Product | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'updateOneProduct', 'onBefore', 'update', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.update({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.update({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'updateOneProduct', 'onAfter', 'update', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'updateOneProduct', 'onAfter', 'update', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Product/UpsertOneProductResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Product/UpsertOneProductResolver.ts
index 30a29b3..922d91a 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Product/UpsertOneProductResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Product/UpsertOneProductResolver.ts
@@ -12,11 +12,13 @@ export class UpsertOneProductResolver {
   async upsertOneProduct(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpsertOneProductArgs): Promise<Product> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Product', 'upsertOneProduct', 'onBefore', 'upsert', ctx, args)
-    const result = await getPrismaFromContext(ctx).product.upsert({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.product.upsert({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Product', 'upsertOneProduct', 'onAfter', 'upsert', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Product', 'upsertOneProduct', 'onAfter', 'upsert', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Provider/AggregateProviderResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Provider/AggregateProviderResolver.ts
index 26a0421..41f800f 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Provider/AggregateProviderResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Provider/AggregateProviderResolver.ts
@@ -12,11 +12,12 @@ export class AggregateProviderResolver {
   })
   async aggregateProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: AggregateProviderArgs): Promise<AggregateProvider> {
     await onIntercept('Provider', 'aggregateProvider', 'onBefore', 'aggregate', ctx, args)
-    const result = getPrismaFromContext(ctx).provider.aggregate({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.provider.aggregate({
       ...args,
       ...transformInfoIntoPrismaArgs(info)
     })
-    await onIntercept('Provider', 'aggregateProvider', 'onAfter', 'aggregate', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('Provider', 'aggregateProvider', 'onAfter', 'aggregate', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Provider/CreateManyProviderResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Provider/CreateManyProviderResolver.ts
index 8df6b30..dd7afdb 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Provider/CreateManyProviderResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Provider/CreateManyProviderResolver.ts
@@ -13,11 +13,13 @@ export class CreateManyProviderResolver {
   async createManyProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateManyProviderArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'createManyProvider', 'onBefore', 'createMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.createMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.createMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'createManyProvider', 'onAfter', 'createMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'createManyProvider', 'onAfter', 'createMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Provider/CreateOneProviderResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Provider/CreateOneProviderResolver.ts
index 693fa9a..a607372 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Provider/CreateOneProviderResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Provider/CreateOneProviderResolver.ts
@@ -12,11 +12,13 @@ export class CreateOneProviderResolver {
   async createOneProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateOneProviderArgs): Promise<Provider> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'createOneProvider', 'onBefore', 'create', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.create({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.create({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'createOneProvider', 'onAfter', 'create', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'createOneProvider', 'onAfter', 'create', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Provider/DeleteManyProviderResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Provider/DeleteManyProviderResolver.ts
index 9d602a6..5e8e6cb 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Provider/DeleteManyProviderResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Provider/DeleteManyProviderResolver.ts
@@ -13,11 +13,13 @@ export class DeleteManyProviderResolver {
   async deleteManyProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteManyProviderArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'deleteManyProvider', 'onBefore', 'deleteMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.deleteMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.deleteMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'deleteManyProvider', 'onAfter', 'deleteMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'deleteManyProvider', 'onAfter', 'deleteMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Provider/DeleteOneProviderResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Provider/DeleteOneProviderResolver.ts
index b0c75fb..50975d9 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Provider/DeleteOneProviderResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Provider/DeleteOneProviderResolver.ts
@@ -12,11 +12,13 @@ export class DeleteOneProviderResolver {
   async deleteOneProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteOneProviderArgs): Promise<Provider | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'deleteOneProvider', 'onBefore', 'delete', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.delete({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.delete({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'deleteOneProvider', 'onAfter', 'delete', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'deleteOneProvider', 'onAfter', 'delete', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Provider/FindFirstProviderOrThrowResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Provider/FindFirstProviderOrThrowResolver.ts
index 8aa294b..7984460 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Provider/FindFirstProviderOrThrowResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Provider/FindFirstProviderOrThrowResolver.ts
@@ -12,11 +12,13 @@ export class FindFirstProviderOrThrowResolver {
   async findFirstProviderOrThrow(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstProviderOrThrowArgs): Promise<Provider | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'findFirstProviderOrThrow', 'onBefore', 'findFirstOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.findFirstOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.findFirstOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'findFirstProviderOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'findFirstProviderOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Provider/FindFirstProviderResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Provider/FindFirstProviderResolver.ts
index c585050..f285fd7 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Provider/FindFirstProviderResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Provider/FindFirstProviderResolver.ts
@@ -12,11 +12,13 @@ export class FindFirstProviderResolver {
   async findFirstProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstProviderArgs): Promise<Provider | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'findFirstProvider', 'onBefore', 'findFirst', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.findFirst({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.findFirst({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'findFirstProvider', 'onAfter', 'findFirst', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'findFirstProvider', 'onAfter', 'findFirst', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Provider/FindManyProviderResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Provider/FindManyProviderResolver.ts
index da07b2a..9165daf 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Provider/FindManyProviderResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Provider/FindManyProviderResolver.ts
@@ -12,11 +12,13 @@ export class FindManyProviderResolver {
   async providers(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindManyProviderArgs): Promise<Provider[]> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'providers', 'onBefore', 'findMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.findMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.findMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'providers', 'onAfter', 'findMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'providers', 'onAfter', 'findMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Provider/FindUniqueProviderOrThrowResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Provider/FindUniqueProviderOrThrowResolver.ts
index 95957b0..c458002 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Provider/FindUniqueProviderOrThrowResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Provider/FindUniqueProviderOrThrowResolver.ts
@@ -12,11 +12,13 @@ export class FindUniqueProviderOrThrowResolver {
   async getProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueProviderOrThrowArgs): Promise<Provider | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'getProvider', 'onBefore', 'findUniqueOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.findUniqueOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.findUniqueOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'getProvider', 'onAfter', 'findUniqueOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'getProvider', 'onAfter', 'findUniqueOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Provider/FindUniqueProviderResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Provider/FindUniqueProviderResolver.ts
index 7d0e816..d21fccb 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Provider/FindUniqueProviderResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Provider/FindUniqueProviderResolver.ts
@@ -12,11 +12,13 @@ export class FindUniqueProviderResolver {
   async provider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueProviderArgs): Promise<Provider | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'provider', 'onBefore', 'findUnique', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.findUnique({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.findUnique({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'provider', 'onAfter', 'findUnique', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'provider', 'onAfter', 'findUnique', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Provider/GroupByProviderResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Provider/GroupByProviderResolver.ts
index c08f65d..dae4921 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Provider/GroupByProviderResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Provider/GroupByProviderResolver.ts
@@ -13,13 +13,14 @@ export class GroupByProviderResolver {
   async groupByProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: GroupByProviderArgs): Promise<ProviderGroupBy[]> {
     const { _count, _avg, _sum, _min, _max } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'groupByProvider', 'onBefore', 'groupBy', ctx, args)
-    const result = getPrismaFromContext(ctx).provider.groupBy({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.provider.groupBy({
       ...args,
       ...Object.fromEntries(
         Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)
       )
     })
-    await onIntercept('Provider', 'groupByProvider', 'onAfter', 'groupBy', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('Provider', 'groupByProvider', 'onAfter', 'groupBy', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Provider/ProviderCrudResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Provider/ProviderCrudResolver.ts
index 0cb2b00..1c8581d 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Provider/ProviderCrudResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Provider/ProviderCrudResolver.ts
@@ -27,12 +27,13 @@ export class ProviderCrudResolver {
   })
   async aggregateProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: AggregateProviderArgs): Promise<AggregateProvider> {
     await onIntercept('Provider', 'aggregateProvider', 'onBefore', 'aggregate', ctx, args)
-    const result = getPrismaFromContext(ctx).provider.aggregate({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.provider.aggregate({
       ...args,
       ...transformInfoIntoPrismaArgs(info)
     })
-    await onIntercept('Provider', 'aggregateProvider', 'onAfter', 'aggregate', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('Provider', 'aggregateProvider', 'onAfter', 'aggregate', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
@@ -41,12 +42,14 @@ export class ProviderCrudResolver {
   async createManyProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateManyProviderArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'createManyProvider', 'onBefore', 'createMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.createMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.createMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'createManyProvider', 'onAfter', 'createMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'createManyProvider', 'onAfter', 'createMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => Provider, {
@@ -55,12 +58,14 @@ export class ProviderCrudResolver {
   async createOneProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateOneProviderArgs): Promise<Provider> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'createOneProvider', 'onBefore', 'create', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.create({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.create({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'createOneProvider', 'onAfter', 'create', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'createOneProvider', 'onAfter', 'create', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
@@ -69,12 +74,14 @@ export class ProviderCrudResolver {
   async deleteManyProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteManyProviderArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'deleteManyProvider', 'onBefore', 'deleteMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.deleteMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.deleteMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'deleteManyProvider', 'onAfter', 'deleteMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'deleteManyProvider', 'onAfter', 'deleteMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => Provider, {
@@ -83,12 +90,14 @@ export class ProviderCrudResolver {
   async deleteOneProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteOneProviderArgs): Promise<Provider | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'deleteOneProvider', 'onBefore', 'delete', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.delete({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.delete({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'deleteOneProvider', 'onAfter', 'delete', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'deleteOneProvider', 'onAfter', 'delete', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => Provider, {
@@ -97,12 +106,14 @@ export class ProviderCrudResolver {
   async findFirstProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstProviderArgs): Promise<Provider | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'findFirstProvider', 'onBefore', 'findFirst', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.findFirst({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.findFirst({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'findFirstProvider', 'onAfter', 'findFirst', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'findFirstProvider', 'onAfter', 'findFirst', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => Provider, {
@@ -111,12 +122,14 @@ export class ProviderCrudResolver {
   async findFirstProviderOrThrow(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstProviderOrThrowArgs): Promise<Provider | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'findFirstProviderOrThrow', 'onBefore', 'findFirstOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.findFirstOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.findFirstOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'findFirstProviderOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'findFirstProviderOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => [Provider], {
@@ -125,12 +138,14 @@ export class ProviderCrudResolver {
   async providers(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindManyProviderArgs): Promise<Provider[]> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'providers', 'onBefore', 'findMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.findMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.findMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'providers', 'onAfter', 'findMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'providers', 'onAfter', 'findMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => Provider, {
@@ -139,12 +154,14 @@ export class ProviderCrudResolver {
   async provider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueProviderArgs): Promise<Provider | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'provider', 'onBefore', 'findUnique', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.findUnique({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.findUnique({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'provider', 'onAfter', 'findUnique', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'provider', 'onAfter', 'findUnique', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => Provider, {
@@ -153,12 +170,14 @@ export class ProviderCrudResolver {
   async getProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueProviderOrThrowArgs): Promise<Provider | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'getProvider', 'onBefore', 'findUniqueOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.findUniqueOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.findUniqueOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'getProvider', 'onAfter', 'findUniqueOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'getProvider', 'onAfter', 'findUniqueOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => [ProviderGroupBy], {
@@ -167,14 +186,15 @@ export class ProviderCrudResolver {
   async groupByProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: GroupByProviderArgs): Promise<ProviderGroupBy[]> {
     const { _count, _avg, _sum, _min, _max } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'groupByProvider', 'onBefore', 'groupBy', ctx, args)
-    const result = getPrismaFromContext(ctx).provider.groupBy({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.provider.groupBy({
       ...args,
       ...Object.fromEntries(
         Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)
       )
     })
-    await onIntercept('Provider', 'groupByProvider', 'onAfter', 'groupBy', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('Provider', 'groupByProvider', 'onAfter', 'groupBy', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
@@ -183,12 +203,14 @@ export class ProviderCrudResolver {
   async updateManyProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateManyProviderArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'updateManyProvider', 'onBefore', 'updateMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.updateMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.updateMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'updateManyProvider', 'onAfter', 'updateMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'updateManyProvider', 'onAfter', 'updateMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => Provider, {
@@ -197,12 +219,14 @@ export class ProviderCrudResolver {
   async updateOneProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateOneProviderArgs): Promise<Provider | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'updateOneProvider', 'onBefore', 'update', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.update({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.update({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'updateOneProvider', 'onAfter', 'update', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'updateOneProvider', 'onAfter', 'update', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => Provider, {
@@ -211,11 +235,13 @@ export class ProviderCrudResolver {
   async upsertOneProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpsertOneProviderArgs): Promise<Provider> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'upsertOneProvider', 'onBefore', 'upsert', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.upsert({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.upsert({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'upsertOneProvider', 'onAfter', 'upsert', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'upsertOneProvider', 'onAfter', 'upsert', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Provider/UpdateManyProviderResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Provider/UpdateManyProviderResolver.ts
index ff7e13c..c45d9a6 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Provider/UpdateManyProviderResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Provider/UpdateManyProviderResolver.ts
@@ -13,11 +13,13 @@ export class UpdateManyProviderResolver {
   async updateManyProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateManyProviderArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'updateManyProvider', 'onBefore', 'updateMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.updateMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.updateMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'updateManyProvider', 'onAfter', 'updateMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'updateManyProvider', 'onAfter', 'updateMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Provider/UpdateOneProviderResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Provider/UpdateOneProviderResolver.ts
index 5bc31e4..e4a4fe8 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Provider/UpdateOneProviderResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Provider/UpdateOneProviderResolver.ts
@@ -12,11 +12,13 @@ export class UpdateOneProviderResolver {
   async updateOneProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateOneProviderArgs): Promise<Provider | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'updateOneProvider', 'onBefore', 'update', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.update({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.update({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'updateOneProvider', 'onAfter', 'update', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'updateOneProvider', 'onAfter', 'update', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/Provider/UpsertOneProviderResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/Provider/UpsertOneProviderResolver.ts
index f0e9edd..5563f2d 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/Provider/UpsertOneProviderResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/Provider/UpsertOneProviderResolver.ts
@@ -12,11 +12,13 @@ export class UpsertOneProviderResolver {
   async upsertOneProvider(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpsertOneProviderArgs): Promise<Provider> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('Provider', 'upsertOneProvider', 'onBefore', 'upsert', ctx, args)
-    const result = await getPrismaFromContext(ctx).provider.upsert({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.provider.upsert({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('Provider', 'upsertOneProvider', 'onAfter', 'upsert', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('Provider', 'upsertOneProvider', 'onAfter', 'upsert', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/AggregateRefreshTokenResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/AggregateRefreshTokenResolver.ts
index 6a0a947..9c18eb6 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/AggregateRefreshTokenResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/AggregateRefreshTokenResolver.ts
@@ -12,11 +12,12 @@ export class AggregateRefreshTokenResolver {
   })
   async aggregateRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: AggregateRefreshTokenArgs): Promise<AggregateRefreshToken> {
     await onIntercept('RefreshToken', 'aggregateRefreshToken', 'onBefore', 'aggregate', ctx, args)
-    const result = getPrismaFromContext(ctx).refreshToken.aggregate({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.refreshToken.aggregate({
       ...args,
       ...transformInfoIntoPrismaArgs(info)
     })
-    await onIntercept('RefreshToken', 'aggregateRefreshToken', 'onAfter', 'aggregate', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('RefreshToken', 'aggregateRefreshToken', 'onAfter', 'aggregate', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/CreateManyRefreshTokenResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/CreateManyRefreshTokenResolver.ts
index 56ffc76..60c2ff9 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/CreateManyRefreshTokenResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/CreateManyRefreshTokenResolver.ts
@@ -13,11 +13,13 @@ export class CreateManyRefreshTokenResolver {
   async createManyRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateManyRefreshTokenArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'createManyRefreshToken', 'onBefore', 'createMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.createMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.createMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'createManyRefreshToken', 'onAfter', 'createMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'createManyRefreshToken', 'onAfter', 'createMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/CreateOneRefreshTokenResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/CreateOneRefreshTokenResolver.ts
index 110e1ae..0eaf59e 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/CreateOneRefreshTokenResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/CreateOneRefreshTokenResolver.ts
@@ -12,11 +12,13 @@ export class CreateOneRefreshTokenResolver {
   async createOneRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateOneRefreshTokenArgs): Promise<RefreshToken> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'createOneRefreshToken', 'onBefore', 'create', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.create({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.create({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'createOneRefreshToken', 'onAfter', 'create', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'createOneRefreshToken', 'onAfter', 'create', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/DeleteManyRefreshTokenResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/DeleteManyRefreshTokenResolver.ts
index f88782c..c20131d 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/DeleteManyRefreshTokenResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/DeleteManyRefreshTokenResolver.ts
@@ -13,11 +13,13 @@ export class DeleteManyRefreshTokenResolver {
   async deleteManyRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteManyRefreshTokenArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'deleteManyRefreshToken', 'onBefore', 'deleteMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.deleteMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.deleteMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'deleteManyRefreshToken', 'onAfter', 'deleteMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'deleteManyRefreshToken', 'onAfter', 'deleteMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/DeleteOneRefreshTokenResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/DeleteOneRefreshTokenResolver.ts
index ed3cdd3..672e719 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/DeleteOneRefreshTokenResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/DeleteOneRefreshTokenResolver.ts
@@ -12,11 +12,13 @@ export class DeleteOneRefreshTokenResolver {
   async deleteOneRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteOneRefreshTokenArgs): Promise<RefreshToken | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'deleteOneRefreshToken', 'onBefore', 'delete', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.delete({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.delete({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'deleteOneRefreshToken', 'onAfter', 'delete', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'deleteOneRefreshToken', 'onAfter', 'delete', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/FindFirstRefreshTokenOrThrowResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/FindFirstRefreshTokenOrThrowResolver.ts
index 2052592..975598b 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/FindFirstRefreshTokenOrThrowResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/FindFirstRefreshTokenOrThrowResolver.ts
@@ -12,11 +12,13 @@ export class FindFirstRefreshTokenOrThrowResolver {
   async findFirstRefreshTokenOrThrow(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstRefreshTokenOrThrowArgs): Promise<RefreshToken | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'findFirstRefreshTokenOrThrow', 'onBefore', 'findFirstOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.findFirstOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.findFirstOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'findFirstRefreshTokenOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'findFirstRefreshTokenOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/FindFirstRefreshTokenResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/FindFirstRefreshTokenResolver.ts
index 69751a5..324e9a4 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/FindFirstRefreshTokenResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/FindFirstRefreshTokenResolver.ts
@@ -12,11 +12,13 @@ export class FindFirstRefreshTokenResolver {
   async findFirstRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstRefreshTokenArgs): Promise<RefreshToken | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'findFirstRefreshToken', 'onBefore', 'findFirst', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.findFirst({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.findFirst({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'findFirstRefreshToken', 'onAfter', 'findFirst', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'findFirstRefreshToken', 'onAfter', 'findFirst', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/FindManyRefreshTokenResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/FindManyRefreshTokenResolver.ts
index a762c14..93f9b26 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/FindManyRefreshTokenResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/FindManyRefreshTokenResolver.ts
@@ -12,11 +12,13 @@ export class FindManyRefreshTokenResolver {
   async refreshTokens(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindManyRefreshTokenArgs): Promise<RefreshToken[]> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'refreshTokens', 'onBefore', 'findMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.findMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.findMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'refreshTokens', 'onAfter', 'findMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'refreshTokens', 'onAfter', 'findMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/FindUniqueRefreshTokenOrThrowResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/FindUniqueRefreshTokenOrThrowResolver.ts
index f433854..6b7fdac 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/FindUniqueRefreshTokenOrThrowResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/FindUniqueRefreshTokenOrThrowResolver.ts
@@ -12,11 +12,13 @@ export class FindUniqueRefreshTokenOrThrowResolver {
   async getRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueRefreshTokenOrThrowArgs): Promise<RefreshToken | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'getRefreshToken', 'onBefore', 'findUniqueOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.findUniqueOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.findUniqueOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'getRefreshToken', 'onAfter', 'findUniqueOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'getRefreshToken', 'onAfter', 'findUniqueOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/FindUniqueRefreshTokenResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/FindUniqueRefreshTokenResolver.ts
index 4fcfbca..4cfa991 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/FindUniqueRefreshTokenResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/FindUniqueRefreshTokenResolver.ts
@@ -12,11 +12,13 @@ export class FindUniqueRefreshTokenResolver {
   async refreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueRefreshTokenArgs): Promise<RefreshToken | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'refreshToken', 'onBefore', 'findUnique', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.findUnique({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.findUnique({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'refreshToken', 'onAfter', 'findUnique', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'refreshToken', 'onAfter', 'findUnique', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/GroupByRefreshTokenResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/GroupByRefreshTokenResolver.ts
index 20b1135..43e4c03 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/GroupByRefreshTokenResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/GroupByRefreshTokenResolver.ts
@@ -13,13 +13,14 @@ export class GroupByRefreshTokenResolver {
   async groupByRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: GroupByRefreshTokenArgs): Promise<RefreshTokenGroupBy[]> {
     const { _count, _avg, _sum, _min, _max } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'groupByRefreshToken', 'onBefore', 'groupBy', ctx, args)
-    const result = getPrismaFromContext(ctx).refreshToken.groupBy({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.refreshToken.groupBy({
       ...args,
       ...Object.fromEntries(
         Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)
       )
     })
-    await onIntercept('RefreshToken', 'groupByRefreshToken', 'onAfter', 'groupBy', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('RefreshToken', 'groupByRefreshToken', 'onAfter', 'groupBy', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/RefreshTokenCrudResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/RefreshTokenCrudResolver.ts
index 6bc3c8d..c479dbb 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/RefreshTokenCrudResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/RefreshTokenCrudResolver.ts
@@ -27,12 +27,13 @@ export class RefreshTokenCrudResolver {
   })
   async aggregateRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: AggregateRefreshTokenArgs): Promise<AggregateRefreshToken> {
     await onIntercept('RefreshToken', 'aggregateRefreshToken', 'onBefore', 'aggregate', ctx, args)
-    const result = getPrismaFromContext(ctx).refreshToken.aggregate({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.refreshToken.aggregate({
       ...args,
       ...transformInfoIntoPrismaArgs(info)
     })
-    await onIntercept('RefreshToken', 'aggregateRefreshToken', 'onAfter', 'aggregate', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('RefreshToken', 'aggregateRefreshToken', 'onAfter', 'aggregate', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
@@ -41,12 +42,14 @@ export class RefreshTokenCrudResolver {
   async createManyRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateManyRefreshTokenArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'createManyRefreshToken', 'onBefore', 'createMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.createMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.createMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'createManyRefreshToken', 'onAfter', 'createMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'createManyRefreshToken', 'onAfter', 'createMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => RefreshToken, {
@@ -55,12 +58,14 @@ export class RefreshTokenCrudResolver {
   async createOneRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateOneRefreshTokenArgs): Promise<RefreshToken> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'createOneRefreshToken', 'onBefore', 'create', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.create({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.create({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'createOneRefreshToken', 'onAfter', 'create', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'createOneRefreshToken', 'onAfter', 'create', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
@@ -69,12 +74,14 @@ export class RefreshTokenCrudResolver {
   async deleteManyRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteManyRefreshTokenArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'deleteManyRefreshToken', 'onBefore', 'deleteMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.deleteMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.deleteMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'deleteManyRefreshToken', 'onAfter', 'deleteMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'deleteManyRefreshToken', 'onAfter', 'deleteMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => RefreshToken, {
@@ -83,12 +90,14 @@ export class RefreshTokenCrudResolver {
   async deleteOneRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteOneRefreshTokenArgs): Promise<RefreshToken | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'deleteOneRefreshToken', 'onBefore', 'delete', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.delete({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.delete({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'deleteOneRefreshToken', 'onAfter', 'delete', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'deleteOneRefreshToken', 'onAfter', 'delete', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => RefreshToken, {
@@ -97,12 +106,14 @@ export class RefreshTokenCrudResolver {
   async findFirstRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstRefreshTokenArgs): Promise<RefreshToken | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'findFirstRefreshToken', 'onBefore', 'findFirst', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.findFirst({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.findFirst({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'findFirstRefreshToken', 'onAfter', 'findFirst', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'findFirstRefreshToken', 'onAfter', 'findFirst', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => RefreshToken, {
@@ -111,12 +122,14 @@ export class RefreshTokenCrudResolver {
   async findFirstRefreshTokenOrThrow(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstRefreshTokenOrThrowArgs): Promise<RefreshToken | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'findFirstRefreshTokenOrThrow', 'onBefore', 'findFirstOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.findFirstOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.findFirstOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'findFirstRefreshTokenOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'findFirstRefreshTokenOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => [RefreshToken], {
@@ -125,12 +138,14 @@ export class RefreshTokenCrudResolver {
   async refreshTokens(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindManyRefreshTokenArgs): Promise<RefreshToken[]> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'refreshTokens', 'onBefore', 'findMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.findMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.findMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'refreshTokens', 'onAfter', 'findMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'refreshTokens', 'onAfter', 'findMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => RefreshToken, {
@@ -139,12 +154,14 @@ export class RefreshTokenCrudResolver {
   async refreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueRefreshTokenArgs): Promise<RefreshToken | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'refreshToken', 'onBefore', 'findUnique', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.findUnique({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.findUnique({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'refreshToken', 'onAfter', 'findUnique', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'refreshToken', 'onAfter', 'findUnique', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => RefreshToken, {
@@ -153,12 +170,14 @@ export class RefreshTokenCrudResolver {
   async getRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueRefreshTokenOrThrowArgs): Promise<RefreshToken | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'getRefreshToken', 'onBefore', 'findUniqueOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.findUniqueOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.findUniqueOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'getRefreshToken', 'onAfter', 'findUniqueOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'getRefreshToken', 'onAfter', 'findUniqueOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => [RefreshTokenGroupBy], {
@@ -167,14 +186,15 @@ export class RefreshTokenCrudResolver {
   async groupByRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: GroupByRefreshTokenArgs): Promise<RefreshTokenGroupBy[]> {
     const { _count, _avg, _sum, _min, _max } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'groupByRefreshToken', 'onBefore', 'groupBy', ctx, args)
-    const result = getPrismaFromContext(ctx).refreshToken.groupBy({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.refreshToken.groupBy({
       ...args,
       ...Object.fromEntries(
         Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)
       )
     })
-    await onIntercept('RefreshToken', 'groupByRefreshToken', 'onAfter', 'groupBy', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('RefreshToken', 'groupByRefreshToken', 'onAfter', 'groupBy', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
@@ -183,12 +203,14 @@ export class RefreshTokenCrudResolver {
   async updateManyRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateManyRefreshTokenArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'updateManyRefreshToken', 'onBefore', 'updateMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.updateMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.updateMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'updateManyRefreshToken', 'onAfter', 'updateMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'updateManyRefreshToken', 'onAfter', 'updateMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => RefreshToken, {
@@ -197,12 +219,14 @@ export class RefreshTokenCrudResolver {
   async updateOneRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateOneRefreshTokenArgs): Promise<RefreshToken | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'updateOneRefreshToken', 'onBefore', 'update', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.update({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.update({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'updateOneRefreshToken', 'onAfter', 'update', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'updateOneRefreshToken', 'onAfter', 'update', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => RefreshToken, {
@@ -211,11 +235,13 @@ export class RefreshTokenCrudResolver {
   async upsertOneRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpsertOneRefreshTokenArgs): Promise<RefreshToken> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'upsertOneRefreshToken', 'onBefore', 'upsert', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.upsert({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.upsert({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'upsertOneRefreshToken', 'onAfter', 'upsert', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'upsertOneRefreshToken', 'onAfter', 'upsert', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/UpdateManyRefreshTokenResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/UpdateManyRefreshTokenResolver.ts
index a817c5d..0317c7d 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/UpdateManyRefreshTokenResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/UpdateManyRefreshTokenResolver.ts
@@ -13,11 +13,13 @@ export class UpdateManyRefreshTokenResolver {
   async updateManyRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateManyRefreshTokenArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'updateManyRefreshToken', 'onBefore', 'updateMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.updateMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.updateMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'updateManyRefreshToken', 'onAfter', 'updateMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'updateManyRefreshToken', 'onAfter', 'updateMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/UpdateOneRefreshTokenResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/UpdateOneRefreshTokenResolver.ts
index d36dffa..6c88272 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/UpdateOneRefreshTokenResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/UpdateOneRefreshTokenResolver.ts
@@ -12,11 +12,13 @@ export class UpdateOneRefreshTokenResolver {
   async updateOneRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateOneRefreshTokenArgs): Promise<RefreshToken | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'updateOneRefreshToken', 'onBefore', 'update', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.update({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.update({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'updateOneRefreshToken', 'onAfter', 'update', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'updateOneRefreshToken', 'onAfter', 'update', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/UpsertOneRefreshTokenResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/UpsertOneRefreshTokenResolver.ts
index 93604d0..9e44de7 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/UpsertOneRefreshTokenResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/RefreshToken/UpsertOneRefreshTokenResolver.ts
@@ -12,11 +12,13 @@ export class UpsertOneRefreshTokenResolver {
   async upsertOneRefreshToken(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpsertOneRefreshTokenArgs): Promise<RefreshToken> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('RefreshToken', 'upsertOneRefreshToken', 'onBefore', 'upsert', ctx, args)
-    const result = await getPrismaFromContext(ctx).refreshToken.upsert({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.refreshToken.upsert({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('RefreshToken', 'upsertOneRefreshToken', 'onAfter', 'upsert', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('RefreshToken', 'upsertOneRefreshToken', 'onAfter', 'upsert', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/User/AggregateUserResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/User/AggregateUserResolver.ts
index bdd6a58..6527461 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/User/AggregateUserResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/User/AggregateUserResolver.ts
@@ -12,11 +12,12 @@ export class AggregateUserResolver {
   })
   async aggregateUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: AggregateUserArgs): Promise<AggregateUser> {
     await onIntercept('User', 'aggregateUser', 'onBefore', 'aggregate', ctx, args)
-    const result = getPrismaFromContext(ctx).user.aggregate({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.user.aggregate({
       ...args,
       ...transformInfoIntoPrismaArgs(info)
     })
-    await onIntercept('User', 'aggregateUser', 'onAfter', 'aggregate', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('User', 'aggregateUser', 'onAfter', 'aggregate', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/User/CreateManyUserResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/User/CreateManyUserResolver.ts
index e84c9b2..2470d97 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/User/CreateManyUserResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/User/CreateManyUserResolver.ts
@@ -13,11 +13,13 @@ export class CreateManyUserResolver {
   async createManyUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateManyUserArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'createManyUser', 'onBefore', 'createMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.createMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.createMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'createManyUser', 'onAfter', 'createMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'createManyUser', 'onAfter', 'createMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/User/CreateOneUserResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/User/CreateOneUserResolver.ts
index ad407bd..252e324 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/User/CreateOneUserResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/User/CreateOneUserResolver.ts
@@ -12,11 +12,13 @@ export class CreateOneUserResolver {
   async createOneUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateOneUserArgs): Promise<User> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'createOneUser', 'onBefore', 'create', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.create({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.create({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'createOneUser', 'onAfter', 'create', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'createOneUser', 'onAfter', 'create', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/User/DeleteManyUserResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/User/DeleteManyUserResolver.ts
index 0bbf073..dc2acf6 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/User/DeleteManyUserResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/User/DeleteManyUserResolver.ts
@@ -13,11 +13,13 @@ export class DeleteManyUserResolver {
   async deleteManyUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteManyUserArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'deleteManyUser', 'onBefore', 'deleteMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.deleteMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.deleteMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'deleteManyUser', 'onAfter', 'deleteMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'deleteManyUser', 'onAfter', 'deleteMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/User/DeleteOneUserResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/User/DeleteOneUserResolver.ts
index 8363ba2..d662c8e 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/User/DeleteOneUserResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/User/DeleteOneUserResolver.ts
@@ -12,11 +12,13 @@ export class DeleteOneUserResolver {
   async deleteOneUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteOneUserArgs): Promise<User | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'deleteOneUser', 'onBefore', 'delete', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.delete({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.delete({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'deleteOneUser', 'onAfter', 'delete', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'deleteOneUser', 'onAfter', 'delete', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/User/FindFirstUserOrThrowResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/User/FindFirstUserOrThrowResolver.ts
index 44ca9d9..70e4c4b 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/User/FindFirstUserOrThrowResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/User/FindFirstUserOrThrowResolver.ts
@@ -12,11 +12,13 @@ export class FindFirstUserOrThrowResolver {
   async findFirstUserOrThrow(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstUserOrThrowArgs): Promise<User | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'findFirstUserOrThrow', 'onBefore', 'findFirstOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.findFirstOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.findFirstOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'findFirstUserOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'findFirstUserOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/User/FindFirstUserResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/User/FindFirstUserResolver.ts
index 16ed8f9..5b81e4a 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/User/FindFirstUserResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/User/FindFirstUserResolver.ts
@@ -12,11 +12,13 @@ export class FindFirstUserResolver {
   async findFirstUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstUserArgs): Promise<User | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'findFirstUser', 'onBefore', 'findFirst', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.findFirst({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.findFirst({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'findFirstUser', 'onAfter', 'findFirst', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'findFirstUser', 'onAfter', 'findFirst', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/User/FindManyUserResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/User/FindManyUserResolver.ts
index 5806450..cedef3e 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/User/FindManyUserResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/User/FindManyUserResolver.ts
@@ -12,11 +12,13 @@ export class FindManyUserResolver {
   async users(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindManyUserArgs): Promise<User[]> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'users', 'onBefore', 'findMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.findMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.findMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'users', 'onAfter', 'findMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'users', 'onAfter', 'findMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/User/FindUniqueUserOrThrowResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/User/FindUniqueUserOrThrowResolver.ts
index 7acd61d..31fd830 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/User/FindUniqueUserOrThrowResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/User/FindUniqueUserOrThrowResolver.ts
@@ -12,11 +12,13 @@ export class FindUniqueUserOrThrowResolver {
   async getUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueUserOrThrowArgs): Promise<User | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'getUser', 'onBefore', 'findUniqueOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.findUniqueOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.findUniqueOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'getUser', 'onAfter', 'findUniqueOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'getUser', 'onAfter', 'findUniqueOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/User/FindUniqueUserResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/User/FindUniqueUserResolver.ts
index 2726f35..0ccb07e 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/User/FindUniqueUserResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/User/FindUniqueUserResolver.ts
@@ -12,11 +12,13 @@ export class FindUniqueUserResolver {
   async user(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueUserArgs): Promise<User | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'user', 'onBefore', 'findUnique', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.findUnique({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.findUnique({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'user', 'onAfter', 'findUnique', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'user', 'onAfter', 'findUnique', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/User/GroupByUserResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/User/GroupByUserResolver.ts
index 578bd72..b38b713 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/User/GroupByUserResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/User/GroupByUserResolver.ts
@@ -13,13 +13,14 @@ export class GroupByUserResolver {
   async groupByUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: GroupByUserArgs): Promise<UserGroupBy[]> {
     const { _count, _avg, _sum, _min, _max } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'groupByUser', 'onBefore', 'groupBy', ctx, args)
-    const result = getPrismaFromContext(ctx).user.groupBy({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.user.groupBy({
       ...args,
       ...Object.fromEntries(
         Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)
       )
     })
-    await onIntercept('User', 'groupByUser', 'onAfter', 'groupBy', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('User', 'groupByUser', 'onAfter', 'groupBy', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/User/UpdateManyUserResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/User/UpdateManyUserResolver.ts
index 065c2cb..e3b7d35 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/User/UpdateManyUserResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/User/UpdateManyUserResolver.ts
@@ -13,11 +13,13 @@ export class UpdateManyUserResolver {
   async updateManyUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateManyUserArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'updateManyUser', 'onBefore', 'updateMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.updateMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.updateMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'updateManyUser', 'onAfter', 'updateMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'updateManyUser', 'onAfter', 'updateMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/User/UpdateOneUserResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/User/UpdateOneUserResolver.ts
index ecb78ca..15ec671 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/User/UpdateOneUserResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/User/UpdateOneUserResolver.ts
@@ -12,11 +12,13 @@ export class UpdateOneUserResolver {
   async updateOneUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateOneUserArgs): Promise<User | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'updateOneUser', 'onBefore', 'update', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.update({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.update({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'updateOneUser', 'onAfter', 'update', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'updateOneUser', 'onAfter', 'update', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/User/UpsertOneUserResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/User/UpsertOneUserResolver.ts
index 2d0d136..33fab16 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/User/UpsertOneUserResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/User/UpsertOneUserResolver.ts
@@ -12,11 +12,13 @@ export class UpsertOneUserResolver {
   async upsertOneUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpsertOneUserArgs): Promise<User> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'upsertOneUser', 'onBefore', 'upsert', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.upsert({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.upsert({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'upsertOneUser', 'onAfter', 'upsert', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'upsertOneUser', 'onAfter', 'upsert', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/crud/User/UserCrudResolver.ts b/back/prisma/generated/type-graphql/resolvers/crud/User/UserCrudResolver.ts
index 99bb5f0..f3b6205 100644
--- a/back/prisma/generated/type-graphql/resolvers/crud/User/UserCrudResolver.ts
+++ b/back/prisma/generated/type-graphql/resolvers/crud/User/UserCrudResolver.ts
@@ -27,12 +27,13 @@ export class UserCrudResolver {
   })
   async aggregateUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: AggregateUserArgs): Promise<AggregateUser> {
     await onIntercept('User', 'aggregateUser', 'onBefore', 'aggregate', ctx, args)
-    const result = getPrismaFromContext(ctx).user.aggregate({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.user.aggregate({
       ...args,
       ...transformInfoIntoPrismaArgs(info)
     })
-    await onIntercept('User', 'aggregateUser', 'onAfter', 'aggregate', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('User', 'aggregateUser', 'onAfter', 'aggregate', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
@@ -41,12 +42,14 @@ export class UserCrudResolver {
   async createManyUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateManyUserArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'createManyUser', 'onBefore', 'createMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.createMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.createMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'createManyUser', 'onAfter', 'createMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'createManyUser', 'onAfter', 'createMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => User, {
@@ -55,12 +58,14 @@ export class UserCrudResolver {
   async createOneUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: CreateOneUserArgs): Promise<User> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'createOneUser', 'onBefore', 'create', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.create({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.create({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'createOneUser', 'onAfter', 'create', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'createOneUser', 'onAfter', 'create', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
@@ -69,12 +74,14 @@ export class UserCrudResolver {
   async deleteManyUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteManyUserArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'deleteManyUser', 'onBefore', 'deleteMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.deleteMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.deleteMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'deleteManyUser', 'onAfter', 'deleteMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'deleteManyUser', 'onAfter', 'deleteMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => User, {
@@ -83,12 +90,14 @@ export class UserCrudResolver {
   async deleteOneUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: DeleteOneUserArgs): Promise<User | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'deleteOneUser', 'onBefore', 'delete', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.delete({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.delete({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'deleteOneUser', 'onAfter', 'delete', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'deleteOneUser', 'onAfter', 'delete', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => User, {
@@ -97,12 +106,14 @@ export class UserCrudResolver {
   async findFirstUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstUserArgs): Promise<User | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'findFirstUser', 'onBefore', 'findFirst', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.findFirst({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.findFirst({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'findFirstUser', 'onAfter', 'findFirst', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'findFirstUser', 'onAfter', 'findFirst', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => User, {
@@ -111,12 +122,14 @@ export class UserCrudResolver {
   async findFirstUserOrThrow(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindFirstUserOrThrowArgs): Promise<User | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'findFirstUserOrThrow', 'onBefore', 'findFirstOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.findFirstOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.findFirstOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'findFirstUserOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'findFirstUserOrThrow', 'onAfter', 'findFirstOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => [User], {
@@ -125,12 +138,14 @@ export class UserCrudResolver {
   async users(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindManyUserArgs): Promise<User[]> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'users', 'onBefore', 'findMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.findMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.findMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'users', 'onAfter', 'findMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'users', 'onAfter', 'findMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => User, {
@@ -139,12 +154,14 @@ export class UserCrudResolver {
   async user(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueUserArgs): Promise<User | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'user', 'onBefore', 'findUnique', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.findUnique({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.findUnique({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'user', 'onAfter', 'findUnique', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'user', 'onAfter', 'findUnique', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => User, {
@@ -153,12 +170,14 @@ export class UserCrudResolver {
   async getUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: FindUniqueUserOrThrowArgs): Promise<User | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'getUser', 'onBefore', 'findUniqueOrThrow', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.findUniqueOrThrow({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.findUniqueOrThrow({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'getUser', 'onAfter', 'findUniqueOrThrow', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'getUser', 'onAfter', 'findUniqueOrThrow', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Query(_returns => [UserGroupBy], {
@@ -167,14 +186,15 @@ export class UserCrudResolver {
   async groupByUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: GroupByUserArgs): Promise<UserGroupBy[]> {
     const { _count, _avg, _sum, _min, _max } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'groupByUser', 'onBefore', 'groupBy', ctx, args)
-    const result = getPrismaFromContext(ctx).user.groupBy({
+    const prisma = getPrismaFromContext(ctx)
+    const result = prisma.user.groupBy({
       ...args,
       ...Object.fromEntries(
         Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)
       )
     })
-    await onIntercept('User', 'groupByUser', 'onAfter', 'groupBy', ctx, args)
-    return result
+    const afterInterceptResult = await onIntercept('User', 'groupByUser', 'onAfter', 'groupBy', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => AffectedRowsOutput, {
@@ -183,12 +203,14 @@ export class UserCrudResolver {
   async updateManyUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateManyUserArgs): Promise<AffectedRowsOutput> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'updateManyUser', 'onBefore', 'updateMany', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.updateMany({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.updateMany({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'updateManyUser', 'onAfter', 'updateMany', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'updateManyUser', 'onAfter', 'updateMany', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => User, {
@@ -197,12 +219,14 @@ export class UserCrudResolver {
   async updateOneUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpdateOneUserArgs): Promise<User | null> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'updateOneUser', 'onBefore', 'update', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.update({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.update({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'updateOneUser', 'onAfter', 'update', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'updateOneUser', 'onAfter', 'update', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 
   @TypeGraphQL.Mutation(_returns => User, {
@@ -211,11 +235,13 @@ export class UserCrudResolver {
   async upsertOneUser(@TypeGraphQL.Ctx() ctx: any, @TypeGraphQL.Info() info: GraphQLResolveInfo, @TypeGraphQL.Args() args: UpsertOneUserArgs): Promise<User> {
     const { _count } = transformInfoIntoPrismaArgs(info)
     await onIntercept('User', 'upsertOneUser', 'onBefore', 'upsert', ctx, args)
-    const result = await getPrismaFromContext(ctx).user.upsert({
+    const prisma = getPrismaFromContext(ctx)
+    const result = await prisma.user.upsert({
       ...args,
       ...(_count && transformCountFieldIntoSelectRelationsCount(_count))
     })
-    await onIntercept('User', 'upsertOneUser', 'onAfter', 'upsert', ctx, args)
-    return result
+
+    const afterInterceptResult = await onIntercept('User', 'upsertOneUser', 'onAfter', 'upsert', ctx, args, result)
+    return afterInterceptResult ?? result
   }
 }
diff --git a/back/prisma/generated/type-graphql/resolvers/inputs/CartCreateInput.ts b/back/prisma/generated/type-graphql/resolvers/inputs/CartCreateInput.ts
index 3dbe856..17bee4a 100644
--- a/back/prisma/generated/type-graphql/resolvers/inputs/CartCreateInput.ts
+++ b/back/prisma/generated/type-graphql/resolvers/inputs/CartCreateInput.ts
@@ -28,9 +28,9 @@ export class CartCreateInput {
   refusalCount?: number | undefined;
 
   @TypeGraphQL.Field(_type => String, {
-    nullable: false
+    nullable: true
   })
-  createdBy!: string;
+  createdBy?: string | undefined;
 
   @TypeGraphQL.Field(_type => String, {
     nullable: true
diff --git a/back/prisma/generated/type-graphql/resolvers/inputs/CartCreateManyInput.ts b/back/prisma/generated/type-graphql/resolvers/inputs/CartCreateManyInput.ts
index 523af4b..694bc7b 100644
--- a/back/prisma/generated/type-graphql/resolvers/inputs/CartCreateManyInput.ts
+++ b/back/prisma/generated/type-graphql/resolvers/inputs/CartCreateManyInput.ts
@@ -31,9 +31,9 @@ export class CartCreateManyInput {
   userId!: string;
 
   @TypeGraphQL.Field(_type => String, {
-    nullable: false
+    nullable: true
   })
-  createdBy!: string;
+  createdBy?: string | undefined;
 
   @TypeGraphQL.Field(_type => String, {
     nullable: true
diff --git a/back/prisma/generated/type-graphql/resolvers/inputs/CartCreateManyUserInput.ts b/back/prisma/generated/type-graphql/resolvers/inputs/CartCreateManyUserInput.ts
index e8c39a6..3dc022c 100644
--- a/back/prisma/generated/type-graphql/resolvers/inputs/CartCreateManyUserInput.ts
+++ b/back/prisma/generated/type-graphql/resolvers/inputs/CartCreateManyUserInput.ts
@@ -26,9 +26,9 @@ export class CartCreateManyUserInput {
   refusalCount?: number | undefined;
 
   @TypeGraphQL.Field(_type => String, {
-    nullable: false
+    nullable: true
   })
-  createdBy!: string;
+  createdBy?: string | undefined;
 
   @TypeGraphQL.Field(_type => String, {
     nullable: true
diff --git a/back/prisma/generated/type-graphql/resolvers/inputs/CartCreateWithoutCartRowsInput.ts b/back/prisma/generated/type-graphql/resolvers/inputs/CartCreateWithoutCartRowsInput.ts
index 90a606b..953cbf7 100644
--- a/back/prisma/generated/type-graphql/resolvers/inputs/CartCreateWithoutCartRowsInput.ts
+++ b/back/prisma/generated/type-graphql/resolvers/inputs/CartCreateWithoutCartRowsInput.ts
@@ -27,9 +27,9 @@ export class CartCreateWithoutCartRowsInput {
   refusalCount?: number | undefined;
 
   @TypeGraphQL.Field(_type => String, {
-    nullable: false
+    nullable: true
   })
-  createdBy!: string;
+  createdBy?: string | undefined;
 
   @TypeGraphQL.Field(_type => String, {
     nullable: true
diff --git a/back/prisma/generated/type-graphql/resolvers/inputs/CartCreateWithoutUserInput.ts b/back/prisma/generated/type-graphql/resolvers/inputs/CartCreateWithoutUserInput.ts
index 442f74c..5164253 100644
--- a/back/prisma/generated/type-graphql/resolvers/inputs/CartCreateWithoutUserInput.ts
+++ b/back/prisma/generated/type-graphql/resolvers/inputs/CartCreateWithoutUserInput.ts
@@ -27,9 +27,9 @@ export class CartCreateWithoutUserInput {
   refusalCount?: number | undefined;
 
   @TypeGraphQL.Field(_type => String, {
-    nullable: false
+    nullable: true
   })
-  createdBy!: string;
+  createdBy?: string | undefined;
 
   @TypeGraphQL.Field(_type => String, {
     nullable: true
diff --git a/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateInput.ts b/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateInput.ts
index ea30a1c..c05eca6 100644
--- a/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateInput.ts
+++ b/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateInput.ts
@@ -23,9 +23,9 @@ export class CartRowsCreateInput {
   quantity?: number | undefined;
 
   @TypeGraphQL.Field(_type => String, {
-    nullable: false
+    nullable: true
   })
-  createdBy!: string;
+  createdBy?: string | undefined;
 
   @TypeGraphQL.Field(_type => String, {
     nullable: true
diff --git a/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateManyCartInput.ts b/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateManyCartInput.ts
index fa5f383..3e08862 100644
--- a/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateManyCartInput.ts
+++ b/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateManyCartInput.ts
@@ -26,9 +26,9 @@ export class CartRowsCreateManyCartInput {
   productId!: bigint;
 
   @TypeGraphQL.Field(_type => String, {
-    nullable: false
+    nullable: true
   })
-  createdBy!: string;
+  createdBy?: string | undefined;
 
   @TypeGraphQL.Field(_type => String, {
     nullable: true
diff --git a/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateManyInput.ts b/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateManyInput.ts
index c7b8a34..576a31d 100644
--- a/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateManyInput.ts
+++ b/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateManyInput.ts
@@ -31,9 +31,9 @@ export class CartRowsCreateManyInput {
   productId!: bigint;
 
   @TypeGraphQL.Field(_type => String, {
-    nullable: false
+    nullable: true
   })
-  createdBy!: string;
+  createdBy?: string | undefined;
 
   @TypeGraphQL.Field(_type => String, {
     nullable: true
diff --git a/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateManyProductInput.ts b/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateManyProductInput.ts
index 34306ee..51d7414 100644
--- a/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateManyProductInput.ts
+++ b/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateManyProductInput.ts
@@ -26,9 +26,9 @@ export class CartRowsCreateManyProductInput {
   cartId!: bigint;
 
   @TypeGraphQL.Field(_type => String, {
-    nullable: false
+    nullable: true
   })
-  createdBy!: string;
+  createdBy?: string | undefined;
 
   @TypeGraphQL.Field(_type => String, {
     nullable: true
diff --git a/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateWithoutCartInput.ts b/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateWithoutCartInput.ts
index 145dab7..cebdc0d 100644
--- a/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateWithoutCartInput.ts
+++ b/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateWithoutCartInput.ts
@@ -22,9 +22,9 @@ export class CartRowsCreateWithoutCartInput {
   quantity?: number | undefined;
 
   @TypeGraphQL.Field(_type => String, {
-    nullable: false
+    nullable: true
   })
-  createdBy!: string;
+  createdBy?: string | undefined;
 
   @TypeGraphQL.Field(_type => String, {
     nullable: true
diff --git a/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateWithoutProductInput.ts b/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateWithoutProductInput.ts
index 0bd448a..fc55f0f 100644
--- a/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateWithoutProductInput.ts
+++ b/back/prisma/generated/type-graphql/resolvers/inputs/CartRowsCreateWithoutProductInput.ts
@@ -22,9 +22,9 @@ export class CartRowsCreateWithoutProductInput {
   quantity?: number | undefined;
 
   @TypeGraphQL.Field(_type => String, {
-    nullable: false
+    nullable: true
   })
-  createdBy!: string;
+  createdBy?: string | undefined;
 
   @TypeGraphQL.Field(_type => String, {
     nullable: true
diff --git a/back/prisma/generated/type-graphql/resolvers/inputs/GeometryInput.ts b/back/prisma/generated/type-graphql/resolvers/inputs/GeometryInput.ts
new file mode 100644
index 0000000..35dc144
--- /dev/null
+++ b/back/prisma/generated/type-graphql/resolvers/inputs/GeometryInput.ts
@@ -0,0 +1,52 @@
+import * as TypeGraphQL from "type-graphql";
+import * as GraphQLScalars from "graphql-scalars";
+import { Prisma } from "@prisma/client";
+
+@TypeGraphQL.InputType("Coordinate", {})
+export class Coordinate {
+  @TypeGraphQL.Field(_type => Number)
+  lat: number
+
+  @TypeGraphQL.Field(_type => Number)
+  lng: number
+}
+
+// used in RideOfferCreateInput
+@TypeGraphQL.InputType("GeometryInput", {})
+export class GeometryInput {
+  @TypeGraphQL.Field(_type => String)
+  type: string
+
+  @TypeGraphQL.Field(_type => Coordinate)
+  coord: Coordinate
+}
+
+@TypeGraphQL.InputType("GeometryListInput", {})
+export class GeometryListInput {
+  @TypeGraphQL.Field(_type => String)
+  type: string
+
+  @TypeGraphQL.Field(_type => [Coordinate])
+  coords: Coordinate[]
+}
+
+
+// used in RideOfferWhereInput
+
+@TypeGraphQL.InputType("DistanceFilter", {})
+export class DistanceFilter {
+  @TypeGraphQL.Field(_type => GraphQLScalars.JSONResolver, {
+    nullable: true
+  })
+  centerPoint?: Prisma.InputJsonValue;
+
+  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
+    nullable: true
+  })
+  lt?: number | undefined;
+
+  @TypeGraphQL.Field(_type => [GeometryListInput], {
+    nullable: true
+  })
+  polygons?: GeometryListInput[];
+}
diff --git a/back/prisma/generated/type-graphql/resolvers/inputs/ProductCreateInput.ts b/back/prisma/generated/type-graphql/resolvers/inputs/ProductCreateInput.ts
index ad9b9ff..2501efc 100644
--- a/back/prisma/generated/type-graphql/resolvers/inputs/ProductCreateInput.ts
+++ b/back/prisma/generated/type-graphql/resolvers/inputs/ProductCreateInput.ts
@@ -27,9 +27,9 @@ export class ProductCreateInput {
   price?: number | undefined;
 
   @TypeGraphQL.Field(_type => String, {
-    nullable: false
+    nullable: true
   })
-  createdBy!: string;
+  createdBy?: string | undefined;
 
   @TypeGraphQL.Field(_type => String, {
     nullable: true
diff --git a/back/prisma/generated/type-graphql/resolvers/inputs/ProductCreateManyInput.ts b/back/prisma/generated/type-graphql/resolvers/inputs/ProductCreateManyInput.ts
index f6584b6..922a0e9 100644
--- a/back/prisma/generated/type-graphql/resolvers/inputs/ProductCreateManyInput.ts
+++ b/back/prisma/generated/type-graphql/resolvers/inputs/ProductCreateManyInput.ts
@@ -26,9 +26,9 @@ export class ProductCreateManyInput {
   price?: number | undefined;
 
   @TypeGraphQL.Field(_type => String, {
-    nullable: false
+    nullable: true
   })
-  createdBy!: string;
+  createdBy?: string | undefined;
 
   @TypeGraphQL.Field(_type => String, {
     nullable: true
diff --git a/back/prisma/generated/type-graphql/resolvers/inputs/ProductCreateWithoutCartRowsInput.ts b/back/prisma/generated/type-graphql/resolvers/inputs/ProductCreateWithoutCartRowsInput.ts
index 5d21d8d..ba0ecf6 100644
--- a/back/prisma/generated/type-graphql/resolvers/inputs/ProductCreateWithoutCartRowsInput.ts
+++ b/back/prisma/generated/type-graphql/resolvers/inputs/ProductCreateWithoutCartRowsInput.ts
@@ -26,9 +26,9 @@ export class ProductCreateWithoutCartRowsInput {
   price?: number | undefined;
 
   @TypeGraphQL.Field(_type => String, {
-    nullable: false
+    nullable: true
   })
-  createdBy!: string;
+  createdBy?: string | undefined;
 
   @TypeGraphQL.Field(_type => String, {
     nullable: true
diff --git a/back/prisma/generated/type-graphql/resolvers/inputs/UserCreateInput.ts b/back/prisma/generated/type-graphql/resolvers/inputs/UserCreateInput.ts
index 5b26258..0dfc758 100644
--- a/back/prisma/generated/type-graphql/resolvers/inputs/UserCreateInput.ts
+++ b/back/prisma/generated/type-graphql/resolvers/inputs/UserCreateInput.ts
@@ -74,9 +74,9 @@ export class UserCreateInput {
   modifiedAt?: Date | undefined;
 
   @TypeGraphQL.Field(_type => String, {
-    nullable: false
+    nullable: true
   })
-  createdBy!: string;
+  createdBy?: string | undefined;
 
   @TypeGraphQL.Field(_type => String, {
     nullable: true
diff --git a/back/prisma/generated/type-graphql/resolvers/inputs/UserCreateManyInput.ts b/back/prisma/generated/type-graphql/resolvers/inputs/UserCreateManyInput.ts
index 00e8630..279c164 100644
--- a/back/prisma/generated/type-graphql/resolvers/inputs/UserCreateManyInput.ts
+++ b/back/prisma/generated/type-graphql/resolvers/inputs/UserCreateManyInput.ts
@@ -71,9 +71,9 @@ export class UserCreateManyInput {
   modifiedAt?: Date | undefined;
 
   @TypeGraphQL.Field(_type => String, {
-    nullable: false
+    nullable: true
   })
-  createdBy!: string;
+  createdBy?: string | undefined;
 
   @TypeGraphQL.Field(_type => String, {
     nullable: true
diff --git a/back/prisma/generated/type-graphql/resolvers/inputs/UserCreateWithoutCartsInput.ts b/back/prisma/generated/type-graphql/resolvers/inputs/UserCreateWithoutCartsInput.ts
index a8a8ba1..96d24cd 100644
--- a/back/prisma/generated/type-graphql/resolvers/inputs/UserCreateWithoutCartsInput.ts
+++ b/back/prisma/generated/type-graphql/resolvers/inputs/UserCreateWithoutCartsInput.ts
@@ -73,9 +73,9 @@ export class UserCreateWithoutCartsInput {
   modifiedAt?: Date | undefined;
 
   @TypeGraphQL.Field(_type => String, {
-    nullable: false
+    nullable: true
   })
-  createdBy!: string;
+  createdBy?: string | undefined;
 
   @TypeGraphQL.Field(_type => String, {
     nullable: true
diff --git a/back/prisma/generated/type-graphql/resolvers/inputs/UserCreateWithoutProvidersInput.ts b/back/prisma/generated/type-graphql/resolvers/inputs/UserCreateWithoutProvidersInput.ts
index 438e6c4..84fa07a 100644
--- a/back/prisma/generated/type-graphql/resolvers/inputs/UserCreateWithoutProvidersInput.ts
+++ b/back/prisma/generated/type-graphql/resolvers/inputs/UserCreateWithoutProvidersInput.ts
@@ -73,9 +73,9 @@ export class UserCreateWithoutProvidersInput {
   modifiedAt?: Date | undefined;
 
   @TypeGraphQL.Field(_type => String, {
-    nullable: false
+    nullable: true
   })
-  createdBy!: string;
+  createdBy?: string | undefined;
 
   @TypeGraphQL.Field(_type => String, {
     nullable: true
diff --git a/back/prisma/generated/type-graphql/resolvers/inputs/UserCreateWithoutRefreshTokenInput.ts b/back/prisma/generated/type-graphql/resolvers/inputs/UserCreateWithoutRefreshTokenInput.ts
index e2bb8cd..a1b559f 100644
--- a/back/prisma/generated/type-graphql/resolvers/inputs/UserCreateWithoutRefreshTokenInput.ts
+++ b/back/prisma/generated/type-graphql/resolvers/inputs/UserCreateWithoutRefreshTokenInput.ts
@@ -73,9 +73,9 @@ export class UserCreateWithoutRefreshTokenInput {
   modifiedAt?: Date | undefined;
 
   @TypeGraphQL.Field(_type => String, {
-    nullable: false
+    nullable: true
   })
-  createdBy!: string;
+  createdBy?: string | undefined;
 
   @TypeGraphQL.Field(_type => String, {
     nullable: true
diff --git a/back/prisma/seed.ts b/back/prisma/seed.ts
index a37139e..e7374ec 100644
--- a/back/prisma/seed.ts
+++ b/back/prisma/seed.ts
@@ -2,75 +2,95 @@ import { PrismaClient } from '@prisma/client'
 const prisma = new PrismaClient()
 
 async function main() {
-//
-// await prisma.user.create({
-//   data: {
-//     id: '1',
-//     email: 'test@gmail.com',
-//     createdBy: 'Test',
-//     userName: 'Test'
-//   }
-// })
-//
-// await prisma.product.create({
-//     data: {
-//       id: 33,
-//       price: 132.7,
-//       description: `Ipsa explicabo sed qui sint voluptate magni. Temporibus id assumenda. Qui quaerat libero voluptas sint quis quia sit cumque. Porro consectetur iusto occaecati dolor quam ducimus quidem laborum. Et sequi reiciendis voluptates. Aut quisquam corporis quaerat quia iure qui vel sequi.`,
-//       title: `Global Solutions Designer`,
-//       createdBy: `Corine82`,
-//       modifiedBy: `gadbin.arnaud8@gmail.com`,
-//       createdAt: `Mon Aug 07 2023 13:47:22 GMT+0200 (Central European Summer Time)`,
-//       modifiedAt: null
-//     }
-//   })
-// await prisma.cart.create({
-//     data: {
-//       id: 18,
-//       refusalCount: 199.96,
-//       cartStatus: `refused`,
-//       totalPrice: 244.65,
-//       createdBy: `gadbin.arnaud8@gmail.com`,
-//       modifiedBy: `Joanny_McCullough91`,
-//       createdAt: `Mon Sep 25 2023 04:30:27 GMT+0200 (Central European Summer Time)`,
-//       modifiedAt: `Wed Mar 22 2023 05:48:47 GMT+0100 (Central European Standard Time)`,
-//       user: {connect:{id: '1'}}
-//     }
-//   })
-// await prisma.bill.create({
-//     data: {
-//       id: 53,
-//       totalPrice: 100.89,
-//       choixSimpleText: `cheque`,
-//       createdBy: `gadbin.arnaud8@gmail.com`,
-//       modifiedBy: `Jeffery4`,
-//       createdAt: `Wed May 24 2023 15:58:19 GMT+0200 (Central European Summer Time)`,
-//       modifiedAt: null,
-//       user: {connect:{id: '1'}}
-//     }
-//   })
-// await prisma.cartRows.create({
-//     data: {
-//       id: 151,
-//       quantity: `32.77`,
-//       price: 138.22,
-//       createdBy: `gadbin.arnaud8@gmail.com`,
-//       modifiedBy: `Nickolas17`,
-//       createdAt: `Thu Jun 08 2023 19:30:11 GMT+0200 (Central European Summer Time)`,
-//       modifiedAt: `Fri Jun 16 2023 23:39:11 GMT+0200 (Central European Summer Time)`
-//     }
-//   })
-// await prisma.billRows.create({
-//     data: {
-//       id: 26,
-//       quantity: 12,
-//       price: 21.96,
-//       createdBy: `Luna.Williamson`,
-//       modifiedBy: null,
-//       createdAt: `Sat Sep 30 2023 16:00:47 GMT+0200 (Central European Summer Time)`,
-//       modifiedAt: `Sat Nov 26 2022 22:43:32 GMT+0100 (Central European Standard Time)`
-//     }
-//   })
+  const product = await prisma.product.findUnique({ where: { id: 1 } })
+  console.log(product)
+  if (!product) {
+    await prisma.product.create({
+      data: {
+        id: 1,
+        createdBy: "System",
+        title: 'Lamborghini Aventador',
+        description: `Longueur	4,79 m
+      Largeur sans rétros	2,03 m
+      Hauteur	1,13 m
+      Empattement	2,70 m
+      Volume de coffre mini/maxi	NC / NC
+      Nombre de portes	2
+      Nombre de places assises	2
+      Poids à vide	1 575 kg`,
+        price: 338
+      }
+    })
+    await prisma.product.create({
+      data: {
+        id: 2,
+        createdBy: "System",
+        title: 'Lamborghini Centenario',
+        description: `En préCommande`,
+        price: 50
+      }
+    })
+    await prisma.product.create({
+      data: {
+        id: 3,
+        createdBy: "System",
+        title: 'Lamborghini Huracan',
+        description: `Commercialisé : depuis 2014
+        Prix : de 180 000 € à 358 699 €
+        Motorisation : Essence
+        Emission de CO2 : 290 g/km*`,
+        price: 338
+      }
+    })
+    await prisma.product.create({
+      data: {
+        id: 4,
+        createdBy: "System",
+        title: 'Lamborghini Revuelto',
+        description: `Commercialisé : depuis 2023
+        Prix : 506 808 €
+        Motorisation : Hybride essence électrique`,
+        price: 5
+      }
+    })
+    await prisma.product.create({
+      data: {
+        id: 5,
+        createdBy: "System",
+        title: 'Lamborghini Sian',
+        description: `Commercialisé : depuis 2020
+        Prix non communiqué...
+        Motorisation : Hybride essence électrique`,
+        price: 12
+      }
+    })
+    await prisma.product.create({
+      data: {
+        id: 6,
+        createdBy: "System",
+        title: 'Lamborghini Urus',
+        description: `Commercialisé : depuis 2018
+        Prix : de 212 415 € à 267 428 €
+        Motorisation : Essence
+        Emission de CO2 :
+        Norme NEDC`,
+        price: 22
+      }
+    })
+    await prisma.product.create({
+      data: {
+        id: 7,
+        createdBy: "System",
+        title: 'Lamborghini Gallardo',
+        description: `Commercialisé : de 2003 à 2014
+        Prix : Voir la cote en occasion
+        Motorisation : Essence
+        Emission de CO2:
+        Norme NEDC`,
+        price: 15
+      }
+    })
+  }
 }
 main()
   .catch(e => console.error(e))
diff --git a/back/src/app.module.ts b/back/src/app.module.ts
index a58ed53..ac5607f 100644
--- a/back/src/app.module.ts
+++ b/back/src/app.module.ts
@@ -10,7 +10,6 @@ import { AuthService } from './auth/auth.service'
 import { AuthResolver } from './auth/auth.resolver'
 import { AuthModule } from './auth/auth.module'
 import { AuthServiceTokens } from './auth/auth.service.tokens'
-import { applyInterceptors } from './middleware/resolversInterceptor'
 import { applyModelsEnhance } from './middleware/modelsEnhance'
 import { applyResolversEnhance } from './middleware/resolversEnhance'
 import { fillContext, prisma } from './auth/middleware'
@@ -29,7 +28,7 @@ else if (process.env.NODE_ENV === 'TEST') {
 console.log(`Running in ${envFilePath}`)
 
 // Fills createdBy + ModifiedBy automatically & custom interceptors
-applyInterceptors()
+// applyInterceptors()
 
 // Ex : Make password not searchable in qraphql
 applyModelsEnhance()
diff --git a/back/src/main.ts b/back/src/main.ts
index 3d2c829..6bd055b 100644
--- a/back/src/main.ts
+++ b/back/src/main.ts
@@ -102,6 +102,9 @@ async function bootstrap () {
     module.hot.dispose(() => app.close())
   }
 
-  await app.listen(PORT, () => console.log(`Running on port ${PORT}`))
+  await app.listen(PORT, async () => {
+    console.log(`Running on domain ${await app.getUrl()}`)
+    console.log(`Running on port ${PORT}`)
+  })
 }
 bootstrap()
-- 
2.39.3 (Apple Git-146)

